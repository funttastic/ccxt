// This schema defines the Protobuf messages used for communication with the
// Cube Order Service (Osmium, OS). The base URL for channels described in this
// page is `wss://api.cube.exchange/os`. The `proto` definition file can be found
// [here](https://github.com/cubexch/ws-api/blob/main/schema/trade.proto).
//
// ### Connection
//
// The order service exposes a websocket endpoint for clients to connect to.
// Once connected, clients should submit a [`Credentials`](#credentials)
// message, listen for [`Bootstrap`](#bootstrap) messages for resting orders
// and positions, and then can begin submitting
// [`OrderRequest`](#orderrequest) and processing
// [`OrderResponse`](#orderresponse).
//
// ### Heartbeats
//
// Application-level heartbeats are expected every 30 seconds. If more than one
// interval is missed, the order service will disconnect the websocket.
//
// ### Price, Quantity, and Lots
//
// All orders are placed on a single market, specified by the market-id. The
// market definition specifies the base and quote assets and their respective
// lot sizes for the particular market. Prices and quantities in this API are in
// units of base and quote _lots_. That is, a quantity of 1 equals 1 base lot,
// and a price of 10 equals 10 quote lots / base lot (read as quote lots per
// base lot).
//
// For example, consider an ETH/BTC market. ETH is the base asset and BTC is the
// quote asset. ETH has 18 decimal places (`1 ETH = 10^18 WEI`) and BTC has 8
// decimal places (`1 BTC = 10^8 SAT`). Suppose that in this example, the ETH/BTC
// market has a base lot size of `10^15` and a quote lot size of `10^0` (`1`).
// Then an order placed with `quantity = 230` and `limit price = 6300` in
// market-agnostic terms is an order for `0.23 ETH` at a price of `0.06300 BTC /
// ETH`, calculated from:
//
// ```text
// 230 base lots
//   * (10^15 WEI / base lot)
//   / (10^18 WEI / ETH)
//   = 0.230 ETH
//
// 6300 quote lots / base lot
//   * (1 SAT / quote lot)
//   / (10^15 WEI / base lot)
//   * (10^18 WEI / ETH)
//   / (10^8 SAT / BTC)
//   = 0.06300 BTC / ETH
// ```
// #### Important Note about Fill Price
// The above example applies to the quantities expected at the limit price,
// but the order might be filled at a different, better price.
//
// When orders are filled in a market enabled for implied matching,
// **the price may not reflect the exact ratio between the base and quote asset transacted**.
// See [Implied Matching](/implied-matching.md) for more details.
//
// When calculating `RawUnit` amounts for transacted assets, e.g. for reconciliation,
// **use the `fill_quantity * base lot size` for the base asset
// and the `fill_quote_quantity * quote lot size` for the quote asset**.
//
// ### Trading Fees
//
// Trading Fees are calculated on each individual trade as a ratio of the filled quantity,
// and are always charged as a deduction from the asset received in that trade.
//
// Fee ratios may vary from trade to trade based on the user's VIP level.
// For fee discounts based on Trading Volume, ratios are adjusted continuously
// at the time of each trade based on the user's trailing 30-day volume.
//
// To ensure that the client has enough information to determine the exact fee charged,
// the fee ratio is expressed as a fixed-point decimal number consisting of a mantissa and an exponent.
// Generally, the exponent will be "-4", indicating that the mantissa is equivalent to pips,
// Though some fees may be expressed with greater granularity.
//
// For example, consider the case of a trade where:
// - Asset received is BTC
// - `quantity` = 5
// - `fee_ratio.mantissa` = 11
// - `fee_ratio.exponent` = -4
//
// ...in which case:
// - The fee ratio would be 0.0011, or 11 pips.
// - The fee would be equal to 0.0055 BTC.
// - The total amount credited at settlement would be 4.9945 BTC.
//
// If you need exact granularity at time of trade, you can replicate the fee calculation performed by the exchange.
// To avoid rounding errors, this entire process is performed in integer math using the exponent as a devisor.
// In the example above, the full fee amount in indivisible [RawUnits](#rawunits) would be calculated as:
// ```text
// 5 * 100_000_000 * 11 / 10_000 = 550_000 RawUnits
//
// (in the BTC case, that would be 550,000 Satoshi)
// ```
//
// Since the fee is expressed with a decimal exponent, it's highly likely that this calculation results in a whole number.
// In the unlikely case that the final division results in a non-whole number, the result should be truncated,
// hence the division at the end: i.e. the fee is rounded down to the nearest `RawUnit`.
//
// ### Exchange Order ID
//
// Each order is assigned a unique ID by the exchange. This order ID is
// consistent across modifies (including cancel-replace), and other operations.
// The exchange order ID can be used to find a particular order in the
// market-by-order market data feed, which allows the determination of FIFO
// queue priority, etc.
//
// ### Transact Time
//
// The transact time is the matching engine timestamp for when an event is
// processed. Events that occur with the same transact time occur atomically
// from the perspective of the matching engine.
//
syntax = "proto3";

package trade;
option csharp_namespace = "Cube.Trade";
option go_package = "go/";

// Side specifies whether the order is buying or selling the base asset. A trade
// is matched when a buyer (BID) and a seller (ASK) agree on a price (cross).
// The bid-ask spread is the gap between the highest bid price and lowest ask
// price on the orderbook.
enum Side {
  // A bid order buys the base asset with the quote asset.
  BID = 0;
  // An ask (or offer) order sells the base asset and gets the quote asset.
  ASK = 1;
}

// Time-in-force (TIF) specifies how long the order remains in effect.
enum TimeInForce {
  // Immediate-or-cancel (IOC), also known as fill-and-kill (FAK), orders are
  // immediately executed against resting orders. If the order cannot be fully
  // filled, the remaining balance will be canceled, and an additional
  // CancelOrderAck with the IOC reason will be sent.
  IMMEDIATE_OR_CANCEL = 0;
  // Good-for-session (GFS) orders are active until they are completely
  // executed, canceled, or when the session expires.
  GOOD_FOR_SESSION = 1;
  // Fill-or-kill (FOK), also known as all-or-none (AON), orders must be filled
  // immediately against resting orders or the entire order is canceled.
  FILL_OR_KILL = 2;
}

// Order-type specifies how the order will be placed into the order book.
//
// - Note that for LIMIT orders, there is a pre-flight check that there is
//   sufficient available balance to place this order at the price and quantity
//   specified. Otherwise, the order will be rejected with the
//   EXCEEDED_SPOT_POSITION reason.
// - For MARKET_LIMIT and MARKET_WITH_PROTECTION orders, there is no such
//   pre-flight check and a submitted order will be partially filled up until
//   the subaccount's position limit. The remaining quantity will be canceled
//   with the POSITION_LIMIT reason.
enum OrderType {
  // A limit order is accompanied with a price (inclusive) that specifies the
  // upper limit to buy and the lower limit to sell. If the price is not
  // immediately available and the TIF allows resting orders, the limit order
  // will rest until filled or canceled.
  LIMIT = 0;
  // A market limit order crosses the bid-ask spread and, if not fully filled,
  // becomes a limit order at the best available market price.
  // - If there is no opposing market, the order is rejected with the
  //   NO_OPPOSING_RESTING_ORDER reason.
  // - The price must be null.
  MARKET_LIMIT = 1;
  // A market with protection order crosses the bid-ask spread and continues to
  // cross until the order is fully filled or the protection price is reached.
  // - The protection price is defined as:
  //   - If the price is provided, this price is used as the protection price.
  //   - If the price is null, the best market price widened by a
  //     market-specific protection point count.
  // - If the protection price would not cross the resting market, the order is
  //   rejected with the NO_OPPOSING_RESTING_ORDER reason instead of resting at
  //   that level.
  MARKET_WITH_PROTECTION = 2;
}

// Self-trade-prevention (STP) allows market participants to prevent the matching
// of orders for accounts with common ownership. Currently, STP only applies for
// orders with the same subaccount_id. STP will only be applied when a match is
// about to occur between the two orders. That is, if the aggressing order is
// fully filled before reaching the resting order in FIFO order, no STP cancels
// will happen.
enum SelfTradePrevention {
  // Cancel-resting specifies that if a self-trade is about to occur, the
  // resting order should be canceled instead and further order book processing
  // should occur as normal.
  CANCEL_RESTING = 0;
  // Cancel-aggressing specifies that if a self-trade is about to occur, the
  // aggressing order should be canceled instead and no further action should be
  // taken.
  CANCEL_AGGRESSING = 1;
  // Allow-self-trade disables STP functionality.
  ALLOW_SELF_TRADE = 2;
}

// Post-only specifies whether a new order is allowed to immediately execute.
// Post-only cannot be enabled with market orders or with a TIF that does not
// allow resting orders.
enum PostOnly {
  DISABLED = 0;
  ENABLED = 1;
}

// Indicates which operations are allowed on this connection.
// The ConnectionStatus may change during a single connection's lifetime.
enum ConnectionStatus {
  // This connection may query balances and see resting orders but may not create, modify, or cancel orders e.g.
  READ_ONLY = 0;
  // There are no restrictions imposed by this connection (though restrictions may apply from elsewhere in the system).
  READ_WRITE = 1;
}

// Sent by client on websocket initialization. Once the websocket has been
// connected, the client is expected to send this credentials message
// immediately. The API key (UUID) and secret access key (hex-encoded 32-byte
// array) should be generated on the settings page with the write access. The
// signature should be calculated as the concatenation of the byte string
// `cube.xyz` and the current unix epoch in seconds interpreted at a
// little-endian 64-bit number.
//
// ### Implementation notes:
// - The signature is base-64 encoded with the 'standard' alphabet and
//   padding.
//
//   ```
//   ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
//   ```
// - The timestamp should be encoded as 8-byte little-endian (array of bytes)
// - The secret key should be decoded from a hex string into a 32-byte array of
//   bytes
//
// If the credentials provided are incorrect, the server will drop the connection with a close code of 4401.
//
// ### Examples
//
// In the following examples, replace "cafecafecafe..." with your secret key.
// When calculated for:
// - secret key: "cafecafecafecafecafecafecafecafecafecafecafecafecafecafecafecafe"
// - timestamp: 1706546268
// ...the resulting signature should be:
// - "tmtSP4NIzTLXyVUHIOfinotGnPWyfM8JefxivBdSjc8="
//
// #### Rust
//
// ```rust compile_fail
// // With crates hmac, base64, hex:
// use base64::Engine;
// use hmac::{Hmac, Mac, NewMac};
// use std::time::SystemTime;
//
// let secret_key = hex::decode("cafecafecafecafecafecafecafecafecafecafecafecafecafecafecafecafe").expect("secret key valid hex").as_slice();
//
// let timestamp: u64 = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH).unwrap().as_secs();
//
// let mut mac = Hmac::<sha2::Sha256>::new_from_slice(
//     secret_key
// ).expect("new HMAC error");
// mac.update(b"cube.xyz");
// mac.update(&timestamp.to_le_bytes());
//
// let signature_bytes = <[u8; 32]>::from(mac.finalize().into_bytes());
// let signature = base64::general_purpose::STANDARD.encode(signature_bytes);
//
// println!("{}", signature);
// ```
//
// #### Typescript
// ```typescript
// import { createHmac } from 'crypto';
//
// const secretKey = "cafecafecafecafecafecafecafecafecafecafecafecafecafecafecafecafe";
// const timestampSecs = Math.floor(Date.now() / 1000);
// const timestampBytes = Buffer.alloc(8);
// timestampBytes.writeBigInt64LE(BigInt(timestampSecs));
//
// const signature = createHmac('sha256', Buffer.from(secretKey, 'hex'))
//   .update(`cube.xyz`)
//   .update(timestampBytes)
//   .digest('base64');
//
// console.log(signature)
// ```
//
// #### Python
// ```python
// import base64
// import hmac
//
// # Calculates "signature" field for "Credentials" message
// def calculate_signature(secret_key: bytes, timestamp_seconds: int) -> str:
//     h = hmac.new(secret_key, digestmod=hashlib.sha256)
//     h.update("cube.xyz".encode('utf-8'))
//     h.update(timestamp_seconds.to_bytes(8, byteorder="little", signed=False))
//     signature_bytes = h.digest()
//     return base64.standard_b64encode(signature_bytes).decode('utf-8')
//
// secret_key = bytes.fromhex("cafecafecafecafecafecafecafecafecafecafecafecafecafecafecafecafe")
// timestamp = int(time.time())
// signature = calculate_signature(secret_key, timestamp)
//
// print(signature)
// ````
//
message Credentials {
  // Public API key
  string access_key_id = 1;
  // HMAC signature, base-64 encoded
  string signature = 2;
  // Timestamp in seconds
  uint64 timestamp = 3;
}


// Every client message, aside from Credentials, must be wrapped as an
// OrderRequest.
message OrderRequest {
  oneof inner {
    NewOrder new = 1;
    CancelOrder cancel = 2;
    ModifyOrder modify = 3;
    Heartbeat heartbeat = 4;
    MassCancel mc = 5;
  }
}

// Place a new order.
message NewOrder {
  // A unique order ID assigned by the client for this order. The ID must be
  // unique among open orders by this subaccount.
  uint64 client_order_id = 1;
  // A request ID that is echoed back on the NewOrderAck or NewOrderReject
  uint64 request_id = 2;
  uint64 market_id = 3;
  optional uint64 price = 4;
  uint64 quantity = 5;
  Side side = 6;
  TimeInForce time_in_force = 7;
  OrderType order_type = 8;
  // The subaccount to place this order on. This subaccount must be writable by
  // the API key specified in the Credentials message.
  uint64 subaccount_id = 9;
  optional SelfTradePrevention self_trade_prevention = 10;
  PostOnly post_only = 11;
  // If true, this order will be automatically cancelled
  // after the closure of the network connection
  // between Cube's servers and the client that placed the order.
  //
  // If the client initiates the disconnect or network instability drops the connection,
  // the order will be cancelled when Cube's servers recognize the disconnection.
  //
  // In the event of a server-side disconnect that causes a halt in trading,
  // such as scheduled downtime, the order will be cancelled before trading resumes.
  bool cancel_on_disconnect = 12;
}

// Cancel a resting order.
// Note that this can be done before the order is acknowledged (an aggressive
// cancel) since the identifying field is the `client_order_id`.
message CancelOrder {
  uint64 market_id = 1;
  // The order ID specified by the client on the NewOrder request.
  uint64 client_order_id = 2;
  // A request ID that is echoed back on the CancelOrderAck or CancelOrderReject
  uint64 request_id = 3;
  // The subaccount that the NewOrder was placed on.
  uint64 subaccount_id = 4;
}

// Modify a resting order.
// - If the `newPrice` and the current resting order's price is the same, and
// `newQuantity` is not greater, then the modify is considered a modify down,
// and the FIFO queue priority is maintained. Otherwise, the modify-order
// request is treated as an atomic cancel-replace and the replacement order is
// placed at the end of the FIFO queue for the new price level.
// - If post-only is specified and the replacement order would trade, then the
// request is rejected and the current resting order remains resting.
//
// Currently, in-flight-mitigation (IFM) is always enabled. That is, the
// cumulative fill qty is subtracted from `newQuantity` to calculate the new
// resting quantity. For example:
//
// ```text
//          | Resting | Filled
// ---------+---------+--------
// New 5    | 5       | 0
// Fill 2   | 3       | 2
// Modify 4 | 2       | 2
// ```
//
// The post-modify quantity will be `newQuantity - filled = 4 - 2 = 2`.
//
// Regardless of IFM, the invariant for order quantity is that `quantity =
// remaining_quantity + cumulative_quantity`.
message ModifyOrder {
  uint64 market_id = 1;
  // The order ID specified by the client on the NewOrder request.
  uint64 client_order_id = 2;
  // A request ID that is echoed back on the ModifyOrderAck or ModifyOrderReject
  uint64 request_id = 3;
  uint64 new_price = 4;
  uint64 new_quantity = 5;
  // The subaccount that the NewOrder was placed on.
  uint64 subaccount_id = 6;
  optional SelfTradePrevention self_trade_prevention = 7;
  PostOnly post_only = 8;
}

// Cancel all resting orders, optionally limiting to a particular market and /
// or order book side.
message MassCancel {
  // The subaccount to cancel orders for.
  uint64 subaccount_id = 1;
  // A request ID that is echoed back on the MassCancelAck and individual
  // CancelOrderAck's.
  uint64 request_id = 2;
  // If specified, only orders on the corresponding market will be canceled.
  optional uint64 market_id = 3;
  // If specified, only orders with this side will be canceled.
  optional Side side = 4;
}

// A client and server heartbeat. The heartbeat reply, including the timestamp
// value, comes from the order service and not the matching engine. Matching
// engine timestamps can be extracted from `transact_time` (below).
//
// Latency can be estimated from this, but only the relative difference between
// successive server messages should be used. In particular, the client and
// server clock should not be expected to be synchronized.
message Heartbeat {
  // A request ID that is echoed back on the Heartbeat
  uint64 request_id = 1;
  uint64 timestamp = 2;
}



// Every exchange message after the initial bootstrap will be wrapped as an
// OrderResponse.
message OrderResponse {
  oneof inner {
    NewOrderAck new_ack = 1;
    CancelOrderAck cancel_ack = 2;
    ModifyOrderAck modify_ack = 3;
    NewOrderReject new_reject = 4;
    CancelOrderReject cancel_reject = 5;
    ModifyOrderReject modify_reject = 6;
    Fill fill = 7;
    Heartbeat heartbeat = 8;
    AssetPosition position = 9;
    MassCancelAck mass_cancel_ack = 10;
    TradingStatus trading_status = 11;
  }
}

// New-order-ack confirms a new-order request. The ack will be ordered before
// any fills for this order.
message NewOrderAck {
  uint64 msg_seq_num = 1;
  // The client order ID specified in the new-order request.
  uint64 client_order_id = 2;
  // The request ID specified in the new-order request.
  uint64 request_id = 3;
  // [Exchange order ID](#exchange-order-id)
  uint64 exchange_order_id = 4;
  uint64 market_id = 5;
  // If the order ultimately rests, the `price` field will include the resting
  // price.
  optional uint64 price = 6;
  // The quantity submitted in the new-order request.
  uint64 quantity = 7;
  Side side = 8;
  TimeInForce time_in_force = 9;
  OrderType order_type = 10;
  // [Transact time](#transact-time)
  uint64 transact_time = 11;
  uint64 subaccount_id = 12;
  bool cancel_on_disconnect = 13;
}

// Cancel-order-ack confirms a cancel request, or that an order has been
// canceled as the result of a different user-initiated reason.
message CancelOrderAck {
  enum Reason {
    UNCLASSIFIED = 0;
    DISCONNECT = 1;
    // This order was specified in a cancel request.
    REQUESTED = 2;
    // This was an IOC new-order that does not get fully filled.
    IOC = 3;
    // A resting order was STP canceled.
    STP_RESTING = 4;
    // An aggressing order was STP canceled.
    STP_AGGRESSING = 5;
    // This order was covered by a mass-cancel request.
    MASS_CANCEL = 6;
    // This order was canceled because asset position limits would be otherwise
    // breached.
    POSITION_LIMIT = 7;
  }

  uint64 msg_seq_num = 1;
  uint64 client_order_id = 2;
  // If the Reason is `DISCONNECT`, `IOC`, `STP_RESTING`, or `STP_AGGRESSING`,
  // this request ID will be `u64::MAX`. Otherwise, it will be the request ID of
  // the initiated cancel action. For a mass cancel, each cancel order ack will
  // have the MassCancel's request_id.
  uint64 request_id = 3;
  // [Transact time](#transact-time)
  uint64 transact_time = 4;
  uint64 subaccount_id = 5;
  Reason reason = 6;
  uint64 market_id = 7;
  // [Exchange order ID](#exchange-order-id)
  uint64 exchange_order_id = 8;
}

// Modify-order-ack confirms a modify-order request. If the modify resulted in
// an aggressing cancel-replace, the ack will be ordered before any fills for
// this order.
message ModifyOrderAck {
  uint64 msg_seq_num = 1;
  uint64 client_order_id = 2;
  // The request ID specified in the modify request.
  uint64 request_id = 3;
  // [Transact time](#transact-time)
  uint64 transact_time = 4;

  // The quantity remaining on the book after applying the modify request.
  uint64 remaining_quantity = 5;
  uint64 subaccount_id = 6;
  uint64 market_id = 7;
  uint64 price = 8;
  // The quantity submitted in the modify request.
  uint64 quantity = 9;
  // The cumulative filled quantity for this order.
  uint64 cumulative_quantity = 10;
  // [Exchange order ID](#exchange-order-id)
  uint64 exchange_order_id = 11;
}

// Mass-cancel-ack confirms a mass-cancel request. If `reason` is set, the mass
// cancel was not applied and there are no affected orders. Individual
// CancelOrderAck's will be sent for each order that was affected.
message MassCancelAck {
  enum Reason {
    UNCLASSIFIED = 0;
    INVALID_MARKET_ID = 1;
    INVALID_SIDE = 2;
  }

  uint64 msg_seq_num = 1;
  uint64 subaccount_id = 2;
  // The request ID specified in the mass-cancel request.
  uint64 request_id = 3;
  // [Transact time](#transact-time)
  uint64 transact_time = 4;
  optional Reason reason = 6;
  // The total number of orders that were canceled.
  uint32 total_affected_orders = 7;
}

// New-order-reject indicates that a new-order request was not applied.
message NewOrderReject {
  // Reasons that are prefixed with `INVALID_` normally indicate that the
  // corresponding field did not take a valid value.
  enum Reason {
    UNCLASSIFIED = 0;
    // Quantity was zero.
    INVALID_QUANTITY = 1;
    // The specified market ID does not exist.
    INVALID_MARKET_ID = 2;
    // The specified client order ID was not unique among open orders for this
    // subaccount.
    DUPLICATE_ORDER_ID = 3;
    INVALID_SIDE = 4;
    INVALID_TIME_IN_FORCE = 5;
    INVALID_ORDER_TYPE = 6;
    INVALID_POST_ONLY = 7;
    INVALID_SELF_TRADE_PREVENTION = 8;
    // Internal error: the matching engine could not find this subaccounts
    // positions.
    UNKNOWN_TRADER = 9;
    PRICE_WITH_MARKET_LIMIT_ORDER = 10;
    POST_ONLY_WITH_MARKET_ORDER = 11;
    POST_ONLY_WITH_INVALID_TIF = 12;
    // The sum of open orders and this new-order would exceed the subaccounts
    // spot limits.
    EXCEEDED_SPOT_POSITION = 13;
    // There are no opposing resting orders to trade against.
    NO_OPPOSING_RESTING_ORDER = 14;
    // The post-only order would have crossed and traded.
    POST_ONLY_WOULD_TRADE = 15;
    // A FOK was not fully fillable against resting orders at the requested
    // price and quantity.
    DID_NOT_FULLY_FILL = 16;

    // An exchange accepts no now orders at this time
    ONLY_ORDER_CANCEL_ACCEPTED = 17;
    // A more specific error code for market-with-protection orders that could
    // trade but have a user-specified protection price that is too tight.
    PROTECTION_PRICE_WOULD_NOT_TRADE = 18;

    // Market orders cannot be place because there is currently no internal
    // reference price
    NO_REFERENCE_PRICE = 19;
    // A market order would trade beyond the internal reference price offset by
    // protection levels in the direction of aggress.
    SLIPPAGE_TOO_HIGH = 20;
    // Limit orders cannot have bid price too low or ask price too high that
    // is multiple times away from the internal reference price.
    OUTSIDE_PRICE_BAND = 21;
  }

  uint64 msg_seq_num = 1;
  // The client order ID specified in the new-order request.
  uint64 client_order_id = 2;
  // The request ID specified in the new-order request.
  uint64 request_id = 3;
  // [Transact time](#transact-time)
  uint64 transact_time = 4;
  uint64 subaccount_id = 5;
  Reason reason = 6;

  uint64 market_id = 7;
  optional uint64 price = 8;
  uint64 quantity = 9;
  Side side = 10;
  TimeInForce time_in_force = 11;
  OrderType order_type = 12;
}

// Cancel-order-reject indicates that a cancel-order request was not applied.
message CancelOrderReject {
  enum Reason {
    UNCLASSIFIED = 0;
    // The specified market ID does not exist.
    INVALID_MARKET_ID = 1;
    // The specified client order ID does not exist for the corresponding market
    // ID and subaccount ID.
    ORDER_NOT_FOUND = 2;
  }

  uint64 msg_seq_num = 1;
  // The client order ID specified in the cancel-order request.
  uint64 client_order_id = 2;
  // The request ID specified in the cancel-order request.
  uint64 request_id = 3;
  // [Transact time](#transact-time)
  uint64 transact_time = 4;
  uint64 subaccount_id = 5;
  Reason reason = 6;
  uint64 market_id = 7;
}

// Modify-order-reject indicates that a modify-order request was not applied.
message ModifyOrderReject {
  // Reasons that are prefixed with `INVALID_` normally indicate that the
  // corresponding field did not take a valid value.
  enum Reason {
    UNCLASSIFIED = 0;
    // Quantity was zero.
    INVALID_QUANTITY = 1;
    // The specified market ID does not exist.
    INVALID_MARKET_ID = 2;
    // The specified client order ID does not exist for the corresponding market
    // ID and subaccount ID.
    ORDER_NOT_FOUND = 3;
    INVALID_IFM = 4;
    INVALID_POST_ONLY = 5;
    INVALID_SELF_TRADE_PREVENTION = 6;
    // Internal error: the matching engine could not find this subaccounts
    // positions.
    UNKNOWN_TRADER = 7;
    // If the modify-order would cause a cancel-replace, the sum of open orders
    // and this replacement order would exceed the subaccounts spot limits.
    EXCEEDED_SPOT_POSITION = 8;
    // If the modify-order would cause a cancel-replace, the post-only
    // replacement would have crossed and traded.
    POST_ONLY_WOULD_TRADE = 9;

    // An exchange accepts no order modifications at this time
    ONLY_ORDER_CANCEL_ACCEPTED = 17;

    // Limit orders cannot have bid price too low or ask price too high that
    // is multiple times away from the internal reference price.
    OUTSIDE_PRICE_BAND = 11;
  }

  uint64 msg_seq_num = 1;
  // The client order ID specified in the modify-order request.
  uint64 client_order_id = 2;
  // The request ID specified in the modify-order request.
  uint64 request_id = 3;
  // [Transact time](#transact-time)
  uint64 transact_time = 4;
  uint64 subaccount_id = 5;
  Reason reason = 6;
  uint64 market_id = 7;
}

// A fill for an order.
message Fill {
  uint64 msg_seq_num = 1;
  uint64 market_id = 2;
  // The client order ID specified in the new-order request.
  uint64 client_order_id = 3;
  // [Exchange order ID](#exchange-order-id)
  uint64 exchange_order_id = 4;
  // The price at which this trade occured.
  // In the case of an implied fill, this price may be fractional,
  // and will be truncated in that case.
  // To determine the exact amount of the assets exchanged in the fill,
  // use the fill_quantity and fill_quote_quantity fields.
  uint64 fill_price = 5;
  // The quantity of the base asset that was traded in this fill,
  // expressed in lots of the base asset.
  uint64 fill_quantity = 6;
  // The remaining base quantity for this order after the fill is applied.
  uint64 leaves_quantity = 7;
  // The quantity of the quote asset that was traded in this fill,
  // expressed in lots of the quote asset.
  // This will generally be the same as the base fill_quantity * fill_price,
  // but may be different in the case of an implied fill.
  uint64 fill_quote_quantity = 15;
  // [Transact time](#transact-time)
  uint64 transact_time = 8;
  uint64 subaccount_id = 9;
  // The cumulative filled base quantity for this order after the fill is applied.
  uint64 cumulative_quantity = 10;
  Side side = 11;
  bool aggressor_indicator = 12;
  // Indicates the fee charged on this trade.
  // See [Fees](#fees) for details.
  FixedPointDecimal fee_ratio = 13;
  // The unique trade ID associated with a match event. Each order
  // participanting in the match event will receive this trade ID
  uint64 trade_id = 14;
}

// A fixed-point decimal number.
// Matches the representation preferred by the FIX protocol,
// except that the exponent is int32 since Protobuf does not have an int8 type.
// The value is computed as `mantissa * 10^exponent`;
// for example, `mantissa = 1234` and `exponent = -2` is `12.34`.
message FixedPointDecimal {
  int64 mantissa=1;
  int32 exponent=2;
}

// The user's underlying asset position. These are sent asynchronously as
// positions are updated and broadcast through internal position channels. They
// can also be tracked by applying other OrderResponse messages individually.
message AssetPosition {
  uint64 subaccount_id = 1;
  uint64 asset_id = 2;
  RawUnits total = 3;
  // The available amount after open orders are subtracted.
  RawUnits available = 4;
}

// Raw-units is a 256-bit number for the amount of an asset. The precision is
// based on the underlying asset. For example, ETH is specified as if in
// fixed-point 10^18, while BTC is specified as if in fixed-point 10^8.
//
// The number is interpreted in 'little-endian' as `[word0, word1, word2,
// word3]`.
message RawUnits {
  uint64 word0 = 1;
  uint64 word1 = 2;
  uint64 word2 = 3;
  uint64 word3 = 4;
}


// A bootstrap message sent after Credentials authentication.
// Client resting and pending orders used to bootstrap state.
// Sent as the first message(s) after initialization.
// A message containing the `Done` variant indicates that the Bootstrap is complete.
// Multiple messages may be received for `RestingOrders` and `AssetPositions`
// and these should be concatenated.
message Bootstrap {
  oneof inner {
    Done done = 1;
    RestingOrders resting = 2;
    AssetPositions position = 3;
    TradingStatus trading_status = 4;
  }
}

// A chunk of resting orders. Sent on bootstrap.
message RestingOrders {
  repeated RestingOrder orders = 1;
}

// A chunk of asset positions. Sent on bootstrap.
message AssetPositions {
  repeated AssetPosition positions = 1;
}

// An indication that bootstrap is complete.
message Done {
  // [Transact time](#transact-time)
  uint64 latest_transact_time = 1;
  // DEPRECATED: will be removed in a future version;
  // read the "connection_status" field in the "Bootstrap.TradingStatus" message
  // that arrives before the "Done" message
  bool read_only = 2;
}

// Indicates the scope of the ability to trade via this connection.
// This message will be sent each time that scope changes.
message TradingStatus {
  // Indicates which operations are available through this connection as of this message.
  ConnectionStatus connection_status = 1;
}

// A resting order. Sent on bootstrap in `RestingOrders`.
message RestingOrder {
  // The client order ID specified in the new-order request.
  uint64 client_order_id = 1;
  // [Exchange order ID](#exchange-order-id)
  uint64 exchange_order_id = 2;
  uint64 market_id = 3;
  uint64 price = 4;
  // The quantity submitted in the latest quantity-modifying request. If the
  // order has not been modified, then it is the quantity on the new-order-ack.
  // If it has been modified, then it is the quantity of the latest
  // modify-order-ack.
  uint64 order_quantity = 5;
  Side side = 6;
  TimeInForce time_in_force = 7;
  OrderType order_type = 8;

  // The current remaining quantity on the book.
  uint64 remaining_quantity = 9;

  // [Transact time](#transact-time) of the NewOrderAck
  uint64 rest_time = 10;
  uint64 subaccount_id = 11;

  // The cumulative filled quantity for this order.
  uint64 cumulative_quantity = 12;
  bool cancel_on_disconnect = 13;
}
