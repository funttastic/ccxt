// This schema defines the Protobuf messages used for communication with the
// Cube Market Data Service (Mendelev, MD). The `proto` definition file can be
// found [here](https://github.com/cubexch/ws-api/blob/main/schema/market_data.proto).
//
// ### Order Book Data
//
// The market data service exposes a websocket endpoint for order book data for
// a given market at `wss://api.cube.exchange/md/book/:market_id`. The order
// book can be consumed by both
// price level through the Market by Price (MBP) and order-by-order through the
// Market by Order (MBO). In addition, clients can subscribe to the trade stream
// and price candlesticks. Clients should submit a [`Config`](#config) and then
// process [`MdMessage`](#mdmessage)'s.
//
// ### Aggregate Book Tops Data
//
// The market data service exposes a websocket endpoint for aggregated
// tops-of-book for all markets at `wss://api.cube.exchange/md/tops`. Client
// should process [`AggMessage`](#aggmessage).
//
// ### Heartbeats
//
// Application-level heartbeats are expected every 30 seconds. If more than one
// interval is missed, the market data service will disconnect the websocket.
//
syntax = "proto3";

package market_data;
option csharp_namespace = "Cube.MarketData";
option go_package = "go/";

// Side specifies whether the level, order, or diff, is for buying or selling
// the base asset.
enum Side {
  // Bids buy the base asset with the quote asset.
  BID = 0;
  // Asks (or offers) sell the base asset and get the quote asset.
  ASK = 1;
}

// The candlestick interval.
enum KlineInterval {
  // 1 second
  S1 = 0;
  // 1 minute
  M1 = 1;
  // 15 minutes
  M15 = 2;
  // 1 hour
  H1 = 3;
  // 4 hours
  H4 = 4;
  // 1 day
  D1 = 5;
}

// Every exchange message from `/book/:market_id` will be wrapped as an
// [`MdMessages`](#mdmessages) which contains multiple `MdMessage`'s.
message MdMessage {
  oneof inner {
    // Server heartbeat reply
    Heartbeat heartbeat = 1;
    // 24h summary
    Summary summary = 2;
    // Recent trades
    Trades trades = 3;
    // Market by order snapshot
    MarketByOrder mbo_snapshot = 4;
    // Market by order diff
    MarketByOrderDiff mbo_diff = 5;
    // Market by price snapshot
    MarketByPrice mbp_snapshot = 6;
    // Market by price diff
    MarketByPriceDiff mbp_diff = 7;
    // Candlestick
    Kline kline = 8;
    MarketStatus market_status = 10;
  }
  // The market ID that this message is for. Null for `MdMessage.Heartbeat`.
  optional uint64 market_id = 9;
}

// Market by price snapshot message. This is chunked into `num_chunks` and starts
// with `chunk = 0`. A snapshot is sent on first connect. `Level`'s should be
// concatened until `chunk = num_chunks - 1`. Currently, the chunks and levels
// are streamed from tightest price level outwards with interleaved Bid and Ask
// levels, but no ordering is guaranteed.
message MarketByPrice {
  repeated Level levels = 1;
  uint32 chunk = 2;
  uint32 num_chunks = 3;

  // Each price level is the aggregate total quantity of orders placed at that
  // price.
  message Level {
    uint64 price = 1;
    uint64 quantity = 2;
    Side side = 3;
  }
}

// Market by price diff message. Book updates for the MBP feed are sent as diffs
// after the initial snapshot. The number of total side levels are for
// reconciliation.
message MarketByPriceDiff {
  repeated Diff diffs = 1;
  // Total number of bid levels after this diff is applied.
  uint32 total_bid_levels = 2;
  // Total number of ask levels after this diff is applied.
  uint32 total_ask_levels = 3;

  // The operation to apply for this price level. Currently, new price levels
  // are created with `REPLACE`.
  enum DiffOp {
    // This operation is NOT used for MBP.
    // The operation of adding a new price level is specified as `REPLACE`.
    ADD = 0;
    // This operation is used when a price level is removed from the book.
    REMOVE = 1;
    // This operation is used when a new price level is added or
    // an existing price level is modified.
    REPLACE = 2;
  }

  // A price level diff overwrites the existing price level.
  message Diff {
    uint64 price = 1;
    uint64 quantity = 2;
    Side side = 3;
    DiffOp op = 4;
  }
}

// Market by order snapshot message. This is chunked into `num_chunks` and starts
// with `chunk = 0`. A snapshot is sent on first connect. `Level`'s should be
// concatened until `chunk = num_chunks - 1`. Orders are sent in order of FIFO
// queue priority so the first order of a level should be the first order to be
// matched when that level is aggressed.
message MarketByOrder {
  repeated Order orders = 1;
  uint32 chunk = 2;
  uint32 num_chunks = 3;

  // A resting order.
  message Order {
    uint64 price = 1;
    uint64 quantity = 2;
    // [Exchange order ID](./websocket-trade-api.md#exchange-order-id)
    uint64 exchange_order_id = 3;
    Side side = 4;
    // Order priority for execution. Valid within a price level and side. That
    // is, orders must first be sorted by side and price (in descending order
    // for bids and ascending for asks), and then the OrderPriority within the
    // level. A lower value is a higher priority.
    uint64 priority = 5;
  }
}

// Market by order diff message. Book updates for the MBO feed are sent as diffs
// after the initial snapshot. The number of total side levels and orders are
// for reconciliation.
//
// Note that for orders that are cancel-replace'd (a modify that lost queue
// priority), the new price and quantity will be reported as a `REPLACE` but the
// exchange order ID will not change.
message MarketByOrderDiff {
  repeated Diff diffs = 1;
  // Total number of bid levels after this diff is applied.
  uint32 total_bid_levels = 2;
  // Total number of ask levels after this diff is applied.
  uint32 total_ask_levels = 3;
  // Total number of bid orders after this diff is applied.
  uint32 total_bid_orders = 4;
  // Total number of ask orders after this diff is applied.
  uint32 total_ask_orders = 5;

  // The operation to apply for this price level. For example, an resting order
  // that gets filled will be `REPLACE`'d with the new resting quantity. An
  // order is `REMOVE`'d when it is fully filled or canceled.
  enum DiffOp {
    ADD = 0;
    REMOVE = 1;
    REPLACE = 2;
  }

  // An order diff creates, updates, or deletes a resting order based on the
  // `exchange_order_id`
  message Diff {
    uint64 price = 1;
    uint64 quantity = 2;
    // [Exchange order ID](./websocket-trade-api.md#exchange-order-id)
    uint64 exchange_order_id = 3;
    Side side = 4;
    DiffOp op = 5;
    // See [`MarketByOrder.Order`](#marketbyorder.order)
    uint64 priority = 6;
  }
}

// The per-market matching engine state. Affects order-entry.
enum MarketState {
  // Sentinel
  UNSPECIFIED = 0;
  // The market is in its normal operating state. All order operations are
  // supported.
  NORMAL_OPERATION = 1;
  // The market is in cancel-only mode. Existing orders are not automatically
  // canceled, and may be filled when the market transitions back to
  // normal-operation.
  CANCEL_ONLY = 2;
}

message MarketStatus {
  uint64 transact_time = 1;
  MarketState market_state = 2;
}

// The side of the aggressing order. This also indicates if the aggressing order
// was an implied order (i.e aggressed into a different market and executed into
// this one through implieds)
enum AggressingSide {
  AGGRESSING_BID = 0;
  AGGRESSING_ASK = 1;
  AGGRESSING_IMPLIED_BID = 2;
  AGGRESSING_IMPLIED_ASK = 3;
}

// Trades since the latest `Trades` message. The result of the trades will also
// appear in the MBP and MBO feeds independently as updates to the resting
// orders and levels, respectively.
message Trades {
  repeated Trade trades = 1;

  message Trade {
    // The ID assigned to this trade. All trades that occur from the same event
    // will be assigned the same ID, and are considered to be an atomic batch.
    uint64 tradeId = 1;
    // The price that this trade occurred at.
    uint64 price = 2;
    // The side of the aggressing order.
    AggressingSide aggressing_side = 3;
    // The [Exchange order ID](./websocket-trade-api.md#exchange-order-id) of
    // the resting order.
    uint64 resting_exchange_order_id = 4;
    uint64 fill_quantity = 5;
    // The [transact time](./websocket-trade-api.md#transact-time) assigned by
    // the matching engine for this trade. All trades that occur from the same
    // event will be assigned the same transact time.
    uint64 transact_time = 6;
    // The [Exchange order ID](./websocket-trade-api.md#exchange-order-id) of
    // the aggressing order.
    uint64 aggressing_exchange_order_id = 7;
  }
}

// Rolling 24h stats.
message Summary {
  // 24h open price
  optional uint64 open = 1;
  // Latest price
  optional uint64 close = 2;
  // 24h low price
  optional uint64 low = 3;
  // 24h high price
  optional uint64 high = 4;
  // Low 64-bits of the base quantity traded
  uint64 base_volume_lo = 5;
  // High 64-bits of the base quantity traded
  uint64 base_volume_hi = 6;
  // Low 64-bits of the quote quantity traded
  uint64 quote_volume_lo = 7;
  // High 64-bits of the quote quantity traded
  uint64 quote_volume_hi = 8;
}

// Candlestick bar.
message Kline {
  KlineInterval interval = 1;
  // The unix nanosecond timestamp that this kline covers.
  uint64 start_time = 2;
  // Kline open price.
  optional uint64 open = 3;
  // Kline close price.
  optional uint64 close = 4;
  // Kline high price.
  optional uint64 high = 5;
  // Kline low price.
  optional uint64 low = 6;
  // Low 64-bits of the base quantity traded.
  uint64 volume_lo = 7;
  // High 64-bits of the base quantity traded.
  uint64 volume_hi = 8;
}

// A client and server heartbeat. The heartbeat reply, including the timestamp
// value, comes from the market data service.
message Heartbeat {
  // A request ID that is echoed back on the Heartbeat
  uint64 request_id = 1;
  uint64 timestamp = 2;
}

message MdMessages {
  repeated MdMessage messages = 1;
}

// Every exchange message from `/tops` will be wrapped as an `AggMessage`.
message AggMessage {
  oneof inner {
    // Server heartbeat reply
    Heartbeat heartbeat = 1;
    // Top of books
    TopOfBooks top_of_books = 2;
    // Rates for all assets
    RateUpdates rate_updates = 3;
  }
}

// Top of book
message TopOfBook {
  uint64 market_id = 1;
  // The [transact time](./websocket-trade-api.md#transact-time) of the latest
  // book update on this market.
  uint64 transact_time = 2;
  // The best bid price.
  optional uint64 bid_price = 3;
  // The total bid quantity at the best bid price.
  optional uint64 bid_quantity = 4;
  // The best ask price.
  optional uint64 ask_price = 5;
  // The total ask quantity at the best ask price.
  optional uint64 ask_quantity = 6;
  // The last trade price.
  optional uint64 last_price = 7;
  // The 24h open price.
  optional uint64 rolling24h_price = 8;

  optional uint64 implied_bid_price = 9;
  optional uint64 implied_bid_quantity = 10;
  optional uint64 implied_ask_price = 11;
  optional uint64 implied_ask_quantity = 12;

  MarketState market_state = 13;
}

// Top of books for all books that were updates since the last top-of-books
// message.
message TopOfBooks {
  repeated TopOfBook tops = 1;
}

// Rate update. Used in conjuction with another rate update to get the price of
// that divisor. Rate's should not be used alone. For example, given a
// RateUpdate for `assetId = BTC, updateSide = BASE` of `r1`, and `assetId =
// EUR, updateSide = QUOTE` of `r2`, the BTC-EUR price estimate is `r1 * r2`.
message RateUpdate {
  uint64 asset_id = 1;
  // The nanosecond timestamp of the update.
  uint64 timestamp = 2;
  // The asset rate at the given timestamp.
  uint64 rate = 3;
  RateUpdateSide side = 4;
}

// The side of the rate update. Given a `BASE` rate of `r`, the `QUOTE` rate is
// `1 / r`, and vice versa.
enum RateUpdateSide {
  // The asset serves as the base asset for the given rate.
  BASE = 0;
  // The asset serves as the quote asset for the given rate.
  QUOTE = 1;
}

// Rates for all assets. Published on connect and updates since the last
// rate-updates message.
message RateUpdates {
  repeated RateUpdate updates = 1;
}

// Client heartbeats and configs. This wrapper is used for both
// `/book/:market_id` and `/tops`, but `config` messages are ignored on the
// latter.
message ClientMessage {
  oneof inner {
    Heartbeat heartbeat = 1;
    Config config = 2;
  }
}

// Set the message subscriptions for `/book/:market_id`. At most one of `mbp`
// and `mbo` can be set.
message Config {
  // Enable MBP feeds
  bool mbp = 1;
  // Enable MBO feeds
  bool mbo = 2;
  // Enable recent trades
  bool trades = 3;
  // Enable 24h summary
  bool summary = 4;
  // Enable price klines
  repeated KlineInterval klines = 5;
  // Market's to subscribe to. Limit 3.
  repeated uint64 market_ids = 6;
}
