# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.cube import ImplicitAPI
import hashlib
import math
import json
from ccxt.base.types import Any, Balances, Currencies, IndexType, Int, Market, Num, Order, OrderBook, OrderSide, OrderType, Str, Ticker, Tickers, Trade, TradingFeeInterface, Transaction
from typing import List
from typing import Any
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import NotSupported
from ccxt.base.errors import AuthenticationError
from ccxt.base.decimal_to_precision import DECIMAL_PLACES


class cube(Exchange, ImplicitAPI):

    def describe(self):
        return self.deep_extend(super(cube, self).describe(), {
            'id': 'cube',
            'name': 'cube',
            'countries': [],
            'urls': {
                'referral': '',
                'logo': 'https://github.com/ccxt/ccxt/assets/43336371/3aa748b7-ea44-45e9-a9e7-b1d207a2578a',
                'api': {
                    'rest': {
                        'production': {
                            'iridium': 'https://api.cube.exchange/ir/v0',
                            'mendelev': 'https://api.cube.exchange/md/v0',
                            'osmium': 'https://api.cube.exchange/os/v0',
                        },
                        'staging': {
                            'iridium': 'https://staging.cube.exchange/ir/v0',
                            'mendelev': 'https://staging.cube.exchange/md/v0',
                            'osmium': 'https://staging.cube.exchange/os/v0',
                        },
                    },
                    'ws': {
                        'production': {
                            'iridium': 'wss://api.cube.exchange/ir',
                            'mendelev': 'wss://api.cube.exchange/md',
                            'osmium': 'wss://api.cube.exchange/os',
                        },
                        'staging': {
                            'iridium': 'wss://staging.cube.exchange/ir',
                            'mendelev': 'wss://staging.cube.exchange/md',
                            'osmium': 'wss://staging.cube.exchange/os',
                        },
                    },
                },
                'www': 'https://www.cube.exchange/',
                'doc': 'https://cubexch.gitbook.io/cube-api',
                'fees': 'https://www.cube.exchange/fees',
            },
            'version': 'v0',
            'api': {
                'rest': {
                    'iridium': {
                        'public': {
                            'get': {
                                '/markets': 1,
                            },
                        },
                        'private': {
                            'get': {
                                '/users/check': 1,
                                '/users/info': 1,
                                '/users/positions': 1,
                                '/users/transfers': 1,
                                '/users/deposits': 1,
                                '/users/withdrawals': 1,
                                '/users/subaccount/{subaccountId}/orders': 1,
                                '/users/subaccount/{subaccountId}/fills': 1,
                                '/users/fee-estimate/{market_id}': 1,
                            },
                            'post': {
                                '/users/subaccounts': 1,
                                '/users/subaccounts/{subaccount_id}': 1,
                                '/users/subaccounts/{subaccount_id}/withdrawals': 1,
                            },
                        },
                    },
                    'mendelev': {
                        'public': {
                            'get': {
                                '/book/{market_id}/snapshot': 1,
                                '/parsed/book/{market_symbol}/snapshot': 1,
                                '/book/{market_id}/recent-trades': 1,
                                '/parsed/book/{market_symbol}/recent-trades': 1,
                                '/tickers/snapshot': 1,
                                '/parsed/tickers': 1,
                            },
                        },
                    },
                    'osmium': {
                        'private': {
                            'get': {
                                '/orders': 1,
                            },
                            'delete': {
                                '/orders': 1,
                                '/order': 1,
                            },
                            'post': {
                                '/order': 1,
                            },
                            'patch': {
                                '/order': 1,
                            },
                        },
                    },
                },
            },
            'has': {
                'CORS': None,
                'spot': True,
                'margin': False,
                'swap': True,
                'future': False,
                'option': False,
                'addMargin': False,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'cancelOrders': False,
                'closeAllPositions': False,
                'closePosition': False,
                'createDepositAddress': False,
                'createMarketOrder': False,
                'createOrder': True,
                'createOrders': False,
                'createPostOnlyOrder': False,
                'createReduceOnlyOrder': False,
                'createStopLimitOrder': False,
                'createStopMarketOrder': False,
                'createStopOrder': False,
                'fetchAccounts': True,
                'fetchBalance': True,
                'fetchBorrowInterest': False,
                'fetchBorrowRateHistory': False,
                'fetchCanceledOrders': False,
                'fetchClosedOrders': False,
                'fetchCrossBorrowRate': False,
                'fetchCrossBorrowRates': False,
                'fetchCurrencies': True,
                'fetchDeposit': False,
                'fetchDepositAddress': False,
                'fetchDepositAddresses': False,
                'fetchDepositAddressesByNetwork': False,
                'fetchDeposits': False,
                'fetchDepositsWithdrawals': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchIsolatedBorrowRate': False,
                'fetchIsolatedBorrowRates': False,
                'fetchLedger': False,
                'fetchLedgerEntry': False,
                'fetchLeverageTiers': False,
                'fetchMarketLeverageTiers': False,
                'fetchMarkets': True,
                'fetchMarkOHLCV': False,
                'fetchMyTrades': False,
                'fetchOHLCV': 'emulated',
                'fetchOpenInterest': False,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrderBooks': False,
                'fetchOrders': False,
                'fetchOrderTrades': False,
                'fetchPermissions': False,
                'fetchPosition': False,
                'fetchPositions': False,
                'fetchPositionsForSymbol': False,
                'fetchPositionsRisk': False,
                'fetchPremiumIndexOHLCV': False,
                'fetchStatus': False,
                'fetchTicker': True,
                'fetchTickers': False,
                'fetchTrades': True,
                'fetchTradingFee': True,
                'fetchTradingLimits': False,
                'fetchTransactionFee': False,
                'fetchTransactionFees': False,
                'fetchTransactions': False,
                'fetchTransfers': False,
                'fetchWithdrawAddresses': False,
                'fetchWithdrawal': False,
                'fetchWithdrawals': False,
                'reduceMargin': False,
                'setLeverage': False,
                'setMargin': False,
                'setMarginMode': False,
                'setPositionMode': False,
                'signIn': False,
                'transfer': False,
                'withdraw': False,
            },
            'timeframes': {
                '1m': '1minute',
                '1h': '1hour',
                '1d': '1day',
                '1M': '1month',
                '1y': '1year',
            },
            'timeout': 10000,
            'rateLimit': 100,
            'userAgent': False,
            'verbose': False,
            'markets': None,
            'symbols': None,
            'currencies': None,
            'markets_by_id': None,
            'currencies_by_id': None,
            'apiKey': '',
            'secret': '',
            'password': '',
            'uid': '',
            'options': {
                'environment': 'production',
                'subaccountId': None,
                'networks': {
                    'BTC': '1',
                    'ERC20': '2',
                    'SPL': '3',
                    'DOGE': '4',
                    'TAO': '5',
                    'LTC': '6',
                    'tBTC': '7',
                    'tETH': '8',
                },
                'impliedNetworks': {
                    'ETH': {'ERC20': '2'},
                    'SOL': {'SPL': '3'},
                },
                'legalMoney': {
                    'USD': True,
                },
            },
            'pro': False,
            'fees': {
                'trading': {
                    'maker': self.parse_number('0.0004'),
                    'taker': self.parse_number('0.0008'),
                },
            },
            'commonCurrencies': None,
            'precisionMode': DECIMAL_PLACES,
            'exceptions': {
                'exact': {
                    'Must be authorized': AuthenticationError,
                    'Market not found': BadRequest,
                    'Insufficient funds': InsufficientFunds,
                    'Order not found': BadRequest,
                },
            },
        })

    def generate_signature(self) -> Any:
        import base64
        import hashlib
        import hmac
        import struct

        timestamp = int(self.milliseconds() / 1000)
        timestamp_bytes = struct.pack('<Q', timestamp)
        fixed_string = b'cube.xyz'
        payload = fixed_string + timestamp_bytes
        secret_key_bytes = bytes.fromhex(self.secret)
        signature = hmac.new(secret_key_bytes, payload, hashlib.sha256).digest()
        signature_b64 = base64.b64encode(signature)
        return [signature_b64.decode(), timestamp]

    def generate_authentication_headers(self):
        signature, timestamp = self.generate_signature()
        return {
            'x-api-key': self.apiKey,
            'x-api-signature': signature,
            'x-api-timestamp': str(timestamp),
        }

    def authenticate_request(self, request: Any) -> Any:
        headers = self.safe_dict(request, 'headers', {})
        request['headers'] = self.extend(headers, self.generate_authentication_headers())
        return request

    def sign(self, path: str, api: str = 'public', method='GET', params={}, headers=None, body=None):
        # TODO This is a workaround to fix transpilation issues for Pythonnot !!
        apiString = ','.join(api)
        environment = self.options['environment']
        baseUrl: str = None
        if apiString.find('iridium')  > -1:
            baseUrl = self.urls['api']['rest'][environment]['iridium']
        elif apiString.find('mendelev') > -1:
            baseUrl = self.urls['api']['rest'][environment]['mendelev']
        elif apiString.find('osmium') > -1:
            baseUrl = self.urls['api']['rest'][environment]['osmium']
        url = baseUrl + self.implode_params(path, params)
        params = self.omit(params, self.extract_params(path))
        # TODO This is a workaround to fix transpilation issues for Pythonnot !!
        if ','.join(['GET', 'HEAD']).find(method) > -1:
            if params:  # TODO: Replace Object
                url += '?' + self.urlencode(params)
        else:
            body = json.dumps(params)
        if apiString.find('private') > -1:
            request = {
                'headers': {
                    'Content-Type': 'application/json',
                    'Referer': 'CCXT',
                },
            }
            request = self.authenticate_request(request)
            headers = request['headers']
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def set_sandbox_mode(self, enable):
        if enable is True:
            self.options['environment'] = 'staging'
        else:
            self.options['environment'] = 'production'

    def fetch_market_meta(self, symbolOrSymbols: Any = None):
        symbol = None
        marketId = None
        market = None
        symbols = None
        marketIds = None
        markets = None
        self.load_markets()
        if symbolOrSymbols is not None:
            if isinstance(symbolOrSymbols, str):
                marketId = symbolOrSymbols.upper().replace('/', '')
                market = self.market(marketId)
                marketId = market['id']
                symbolOrSymbols = self.safe_symbol(marketId, market)
                symbol = symbolOrSymbols
                return {
                    'symbol': symbol,
                    'marketId': marketId,
                    'market': market,
                    'symbols': symbols,
                    'marketIds': marketIds,
                    'markets': markets,
                }
            elif isinstance(symbolOrSymbols, list):
                marketIds = []
                markets = []
                for i in range(0, len(symbolOrSymbols)):
                    marketId = symbolOrSymbols[i].upper().replace('/', '')
                    market = self.market(marketId)
                    marketId = market['id']
                    symbolOrSymbols[i] = self.safe_symbol(marketId, market)
                    marketIds.append(marketId)
                    markets.append(market)
                symbolOrSymbols = self.market_symbols(symbolOrSymbols)
                symbols = symbolOrSymbols
                return {
                    'symbol': symbol,
                    'marketId': marketId,
                    'market': market,
                    'symbols': symbols,
                    'marketIds': marketIds,
                    'markets': markets,
                }
            else:
                raise BadSymbol(self.id + ' symbolOrSymbols must be a string or an array of strings')
        return {
            'symbol': symbol,
            'marketId': marketId,
            'market': market,
            'symbols': symbols,
            'marketIds': marketIds,
            'markets': markets,
        }

    def inject_sub_account_id(self, request, params):
        if self.safe_integer(params, 'subaccountId') is not None:
            request['subaccountId'] = self.safe_integer(params, 'subaccountId')
        elif self.safe_integer(params, 'subAccountId') is not None:
            request['subaccountId'] = self.safe_integer(params, 'subAccountId')
        elif self.safe_integer(self.options, 'subaccountId') is not None:
            request['subaccountId'] = self.safe_integer(self.options, 'subaccountId')
        elif self.safe_integer(self.options, 'subAccountId') is not None:
            request['subaccountId'] = self.safe_integer(self.options, 'subAccountId')

    def fetch_currencies(self, params={}):
        """
        fetches all available currencies on an exchange
        :see: https://cubexch.gitbook.io/cube-api/rest-iridium-api#markets
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an associative dictionary of currencies
        """
        response = self.restIridiumPublicGetMarkets(params)
        # {
        #     "result": {
        #         "assets": [
        #             {
        #                 "assetId": 1,
        #                 "symbol": "BTC",
        #                 "decimals": 8,
        #                 "displayDecimals": 5,
        #                 "settles": True,
        #                 "assetType": "Crypto",
        #                 "sourceId": 1,
        #                 "metadata": {
        #                     "dustAmount": 3000
        #                 },
        #                 "status": 1
        #             },
        #             ...
        #         ],
        #         ...
        #     }
        # }
        assets = self.safe_list(self.safe_dict(response, 'result'), 'assets')
        return self.parse_currencies(assets)

    def parse_currencies(self, assets: dict) -> Currencies:
        result = {}
        for i in range(0, len(assets)):
            rawCurrency = assets[i]
            symbol = self.safe_string_upper(rawCurrency, 'symbol')
            # code = self.safe_currency_code(id)
            code = self.safe_string(rawCurrency, 'assetId')
            name = self.safe_string(self.safe_dict(rawCurrency, 'metadata'), 'currencyName')
            networkId = self.safe_string(rawCurrency, 'sourceId')
            networks = {}
            networks[networkId] = networkId
            currency = self.safe_currency_structure({
                'info': rawCurrency,
                'id': symbol,
                'numericId': self.safe_integer(rawCurrency, 'assetId'),
                'code': symbol,
                'precision': self.safe_integer(rawCurrency, 'decimals'),
                'type': self.safe_string_lower(rawCurrency, 'assetType'),
                'name': name,
                'active': self.safe_integer(rawCurrency, 'status') == 1,
                # TODO: Find out what status numbers there are
                'deposit': None,
                # These flags determine if the currency can be deposited or withdrawn
                'withdraw': None,
                # TODO: What kind of fee is self?
                'fee': None,
                'fees': {},
                'networks': networks,
                'limits': {
                    'deposit': {
                        'min': None,
                        'max': None,
                    },
                    'withdraw': {
                        'min': None,
                        'max': None,
                    },
                },
            })
            result[code] = currency
        return result

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for cube
        :see: https://cubexch.gitbook.io/cube-api/rest-iridium-api#markets
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of objects representing market data
        """
        response = self.restIridiumPublicGetMarkets(params)
        # {
        #     "result": {
        #         "assets": [
        #             {
        #                 "assetId": 1,
        #                 "symbol": "BTC",
        #                 "decimals": 8,
        #                 "displayDecimals": 5,
        #                 "settles": True,
        #                 "assetType": "Crypto",
        #                 "sourceId": 1,
        #                 "metadata": {
        #                     "dustAmount": 3000
        #                 },
        #                 "status": 1
        #             },
        #             ...
        #         ],
        #         "markets": [
        #             {
        #                 "marketId": 100004,
        #                 "symbol": "BTCUSDC",
        #                 "baseAssetId": 1,
        #                 "baseLotSize": "1000",
        #                 "quoteAssetId": 7,
        #                 "quoteLotSize": "1",
        #                 "priceDisplayDecimals": 2,
        #                 "protectionPriceLevels": 3000,
        #                 "priceBandBidPct": 25,
        #                 "priceBandAskPct": 400,
        #                 "priceTickSize": "0.1",
        #                 "quantityTickSize": "0.00001",
        #                 "status": 1,
        #                 "feeTableId": 2
        #             },
        #             ...
        #         ],
        #         "feeTables": [
        #             {
        #                 "feeTableId": 1,
        #                 "feeTiers": [
        #                     {
        #                         "priority": 0,
        #                         "makerFeeRatio": 0.0,
        #                         "takerFeeRatio": 0.0
        #                     }
        #                 ]
        #             },
        #             {
        #                 "feeTableId": 2,
        #                 "feeTiers": [
        #                     {
        #                         "priority": 0,
        #                         "makerFeeRatio": 0.0004,
        #                         "takerFeeRatio": 0.0008
        #                     }
        #                 ]
        #             }
        #         ]
        #     }
        # }
        rawMarkets = self.safe_list(self.safe_dict(response, 'result'), 'markets')
        rawAssets = self.safe_list(self.safe_dict(response, 'result'), 'assets')
        self.currencies = self.parse_currencies(rawAssets)
        return self.parse_markets(rawMarkets)

    def parse_markets(self, markets: dict) -> List[Market]:
        result = []
        for i in range(0, len(markets)):
            market = self.parse_market(markets[i])
            result.append(market)
        return result

    def parse_market(self, market: dict) -> Market:
        id = self.safe_string_lower(market, 'symbol')
        symbol = id.upper()
        baseAssetId = self.safe_string(market, 'baseAssetId')
        baseAsset = self.safe_dict(self.currencies, baseAssetId)
        quoteAssetId = self.safe_string(market, 'quoteAssetId')
        quoteAsset = self.safe_dict(self.currencies, quoteAssetId)
        base = self.safe_string_upper(baseAsset, 'id')
        quote = self.safe_string_upper(quoteAsset, 'id')
        baseId = base.lower()
        quoteId = quote.lower()
        return self.safe_market_structure({
            'id': id,
            'lowercaseId': id.lower(),
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': None,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': None,
            'type': 'spot',
            'spot': True,
            'margin': False,
            'swap': False,
            'future': False,
            'option': False,
            'active': self.safe_integer(market, 'status') == 1,
            'contract': False,
            'linear': None,
            'inverse': None,
            'contractSize': None,
            'taker': self.safe_number(self.safe_dict(self.fees, 'trading'), 'taker'),
            'maker': self.safe_number(self.safe_dict(self.fees, 'trading'), 'maker'),
            'expiry': None,
            'expiryDatetime': None,
            'strike': None,
            'optionType': None,
            'precision': {
                'amount': self.parse_number(self.safe_string(market, 'quantityTickSize')),
                'price': self.parse_number(self.safe_string(market, 'priceTickSize')),
            },
            'limits': {
                'leverage': {
                    'min': None,
                    'max': None,
                },
                'amount': {
                    'min': None,
                    'max': None,
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': None,
                    'max': None,
                },
            },
            'created': None,
            'info': market,
        })

    def fetch_order_book(self, symbol: str, limit: Int = None, params={}) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :see: https://cubexch.gitbook.io/cube-api/rest-mendelev-api#book-market_id-snapshot
        :see: https://cubexch.gitbook.io/cube-api/rest-mendelev-api#parsed-book-market_symbol-snapshot
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        market = self.market(symbol)
        marketInfo = self.safe_dict(market, 'info')
        symbolFromInfo = self.safe_string(marketInfo, 'symbol')
        request = {'market_symbol': symbolFromInfo}
        response = self.restMendelevPublicGetParsedBookMarketSymbolSnapshot(self.extend(request, params))
        #
        # {
        #   "result":{
        #       "ticker_id":"BTCUSDC",
        #       "timestamp":1711544655331,
        #       "bids":[
        #           [
        #               70635.6,
        #               0.01
        #           ]
        #       ],
        #       "asks":[
        #           [
        #               70661.8,
        #               0.1421
        #           ]
        #       ]
        #   }
        # }
        #
        rawBids = self.safe_list(self.safe_dict(response, 'result'), 'bids', [])
        rawAsks = self.safe_list(self.safe_dict(response, 'result'), 'asks', [])
        rawOrderbook = {
            'bids': rawBids,
            'asks': rawAsks,
        }
        timestamp = self.safe_timestamp(self.safe_dict(response, 'result'), 'timestamp')
        return self.parse_order_book(rawOrderbook, symbol, timestamp, 'bids', 'asks')

    def parse_bids_asks(self, bidasks, priceKey: IndexType = 0, amountKey: IndexType = 1, countOrIdKey: IndexType = 2) -> List[Any]:
        return bidasks

    def fetch_ticker(self, symbol: str, params={}) -> Ticker:
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :see: https://cubexch.gitbook.io/cube-api/rest-mendelev-api#parsed-tickers
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        tickers = self.fetch_tickers([symbol], params)
        ticker = self.safe_value(tickers, symbol, None)
        if ticker is None:
            raise BadSymbol(self.id + ' fetchTicker() symbol ' + symbol + ' not found')
        return ticker

    def parse_ticker(self, ticker: dict, market: Market = None) -> Ticker:
        #
        #       {
        #         ticker_id: "JTOUSDC",
        #         base_currency: "JTO",
        #         quote_currency: "USDC",
        #         timestamp: 1713217334960,
        #         last_price: 2.6624,
        #         base_volume: 337.12,
        #         quote_volume: 961.614166,
        #         bid: 2.6627,
        #         ask: 2.6715,
        #         high: 3.0515,
        #         low: 2.6272,
        #         open: 2.8051,
        #       }
        #
        timestamp = self.safe_integer(ticker, 'timestamp')
        return self.safe_ticker({
            'symbol': self.safe_string(market, 'symbol'),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_number(ticker, 'high'),
            'low': self.safe_number(ticker, 'low'),
            'bid': self.safe_number(ticker, 'bid'),
            'bidVolume': self.safe_number(ticker, 'base_volume'),
            'ask': self.safe_number(ticker, 'ask'),
            'askVolume': self.safe_number(ticker, 'quote_volume'),
            'vwap': None,
            'open': self.safe_number(ticker, 'open'),
            'close': None,
            'last': self.safe_number(ticker, 'last_price'),
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': self.safe_number(ticker, 'base_volume'),
            'quoteVolume': self.safe_number(ticker, 'quote_volume'),
            'info': ticker,
        }, market)

    def fetch_tickers(self, symbols: List[str] = None, params={}) -> Tickers:
        """
        fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        :see: https://cubexch.gitbook.io/cube-api/rest-mendelev-api#parsed-tickers
        :param str[]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of `ticker structures <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        meta = self.fetch_market_meta(symbols)
        symbols = self.safe_list(meta, 'symbols')
        response = self.restMendelevPublicGetParsedTickers(params)
        #
        #  {
        #     result: [
        #       {
        #     ticker_id: "JTOUSDC",
        #     base_currency: "JTO",
        #     quote_currency: "USDC",
        #     timestamp: 1713216571697,
        #     last_price: 2.6731,
        #     base_volume: 333.66,
        #     quote_volume: 953.635304,
        #     bid: 2.6653,
        #     ask: 2.6761,
        #     high: 3.0515,
        #     low: 2.6272,
        #     open: 2.8231,
        #      },
        #    ],
        #  }
        #
        rawTickers = self.safe_list(response, 'result', [])
        result = {}
        for i in range(0, len(rawTickers)):
            rawTicker = rawTickers[i]
            marketId = self.market_id(self.safe_string(rawTicker, 'ticker_id').upper().replace('/', ''))
            market = self.market(marketId)
            symbol = self.safe_string(market, 'symbol')
            ticker = self.parse_ticker(rawTicker, market)
            result[symbol] = ticker
        return self.filter_by_array_tickers(result, 'symbol', symbols)

    def fetch_ohlcv(self, symbol: str, timeframe='1m', since: Int = None, limit: Int = None, params={}) -> List[list]:
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :see: https://cubexch.gitbook.io/cube-api/rest-mendelev-api#parsed-tickers
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        market = self.safe_dict(meta, 'market')
        request = {
            'duration': self.timeframes[timeframe],
        }
        if limit is not None:
            request['limit'] = limit
        if since is not None:
            request['startTime'] = since
        response = self.restMendelevPublicGetParsedTickers(self.extend(request, params))
        data = self.safe_value(response, 'result', [])
        #
        #  {
        #     result: [
        #       {
        #     ticker_id: "JTOUSDC",
        #     base_currency: "JTO",
        #     quote_currency: "USDC",
        #     timestamp: 1713216571697,
        #     last_price: 2.6731,
        #     base_volume: 333.66,
        #     quote_volume: 953.635304,
        #     bid: 2.6653,
        #     ask: 2.6761,
        #     high: 3.0515,
        #     low: 2.6272,
        #     open: 2.8231,
        #      },
        #    ],
        #  }
        #
        return self.parse_ohlcvs(data, market, timeframe, since, limit)

    def parse_ohlcv(self, ohlcv, market: Market = None) -> list:
        #
        #       {
        #         ticker_id: "JTOUSDC",
        #         base_currency: "JTO",
        #         quote_currency: "USDC",
        #         timestamp: 1713217334960,
        #         last_price: 2.6624,
        #         base_volume: 337.12,
        #         quote_volume: 961.614166,
        #         bid: 2.6627,
        #         ask: 2.6715,
        #         high: 3.0515,
        #         low: 2.6272,
        #         open: 2.8051,
        #       }
        #
        return [
            self.safe_timestamp(ohlcv, 'timestamp'),
            self.safe_number(ohlcv, 'open'),
            self.safe_number(ohlcv, 'high'),
            self.safe_number(ohlcv, 'low'),
            self.safe_number(ohlcv, 'last_price'),
            self.safe_number(ohlcv, 'quote_volume'),
        ]

    def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :see: https://cubexch.gitbook.io/cube-api/rest-iridium-api#users-positions
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://github.com/ccxt/ccxt/wiki/Manual#order-structure>`
        """
        self.fetch_market_meta()
        response = self.restIridiumPrivateGetUsersPositions(params)
        subaccountId = self.safe_integer(self.options, 'subaccountId')
        allOrders = self.fetch_orders_all_markets()
        result = self.safe_list(self.safe_dict(self.safe_dict(response, 'result'), subaccountId), 'inner')
        return self.parse_balance(result, allOrders)

    def parse_balance(self, response: Any, allOrders: Any = None) -> Balances:
        openOrders = []
        filledUnsettledOrders = []
        allMarketsByNumericId = {}
        for i in range(0, self.markets_by_id):
            marketArrayItem = list(self.markets_by_id.values())[i]
            market = marketArrayItem[0]
            marketInfo = self.safe_dict(market, 'info')
            marketNumericId = self.safe_string(marketInfo, 'marketId')
            allMarketsByNumericId[marketNumericId] = market
        free = {}
        used = {}
        total = {}
        for i in range(0, len(response)):
            asset = response[i]
            assetAmount = int(self.safe_string(asset, 'amount'))
            if assetAmount > 0:
                assetNumericId = self.safe_string(asset, 'assetId')
                currency = self.currency(assetNumericId)
                currencyPrecision = self.safe_integer(currency, 'precision')
                assetSymbol = self.safe_string(currency, 'id')
                total[assetSymbol] = assetAmount / 10 ** currencyPrecision
        for i in range(0, len(allOrders)):
            order = allOrders[i]
            orderStatus = self.safe_string(order, 'status')
            if orderStatus == 'open':
                openOrders.append(order)
            if orderStatus == 'filled':
                isSettled = self.safe_string(order, 'settled')
                if not isSettled:
                    filledUnsettledOrders.append(order)
        for i in range(0, len(openOrders)):
            order = openOrders[i]
            orderMarketId = self.safe_string(order, 'marketId')
            orderMarket = self.safe_dict(allMarketsByNumericId, orderMarketId)
            orderSide = self.safe_string(order, 'side')
            orderBaseToken = self.safe_string(orderMarket, 'base')
            orderQuoteToken = self.safe_string(orderMarket, 'quote')
            orderAmount = self.safe_integer(order, 'qty')
            orderPrice = self.safe_integer(order, 'price')
            targetToken = ''
            lotSize = 0
            if orderSide == 'Ask':
                targetToken = orderBaseToken
                lotSize = self.safe_integer(self.safe_dict(orderMarket, 'info'), 'baseLotSize')
            elif orderSide == 'Bid':
                targetToken = orderQuoteToken
                lotSize = self.safe_integer(self.safe_dict(orderMarket, 'info'), 'quoteLotSize')
            targetCurrency = self.currencies_by_id[targetToken]
            targetCurrencyPrecision = self.safe_integer(targetCurrency, 'precision')
            orderLockedAmount = 0
            if orderSide == 'Ask':
                orderLockedAmount = orderAmount * lotSize / 10 ** targetCurrencyPrecision
            elif orderSide == 'Bid':
                orderLockedAmount = orderAmount * orderPrice * lotSize / 10 ** targetCurrencyPrecision
            if used[targetToken] is None:
                used[targetToken] = orderLockedAmount
            else:
                used[targetToken] += orderLockedAmount
            free[targetToken] = total[targetToken] - used[targetToken]
        timestamp = self.milliseconds()
        result = {
            'info': response,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'free': free,
            'used': used,
            'total': total,
        }
        for i in range(0, total):
            assetSymbol = list(total.keys())[i]
            assetBalances = {
                'free': free[assetSymbol],
                'used': used[assetSymbol],
                'total': total[assetSymbol],
            }
            result[assetSymbol] = assetBalances
        return self.safe_balance(result)

    def create_order(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num = None, params={}) -> Order:
        """
        create a trade order
        :see: https://cubexch.gitbook.io/cube-api/rest-osmium-api#order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit' or 'STOP_LOSS' or 'STOP_LOSS_LIMIT' or 'TAKE_PROFIT' or 'TAKE_PROFIT_LIMIT' or 'STOP'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of you want to trade in units of the base currency
        :param float [price]: the price that the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        marketId = self.safe_string(meta, 'marketId')
        market = self.safe_dict(meta, 'market')
        rawMarketId = self.safe_integer(self.safe_dict(market, 'info'), 'marketId')
        exchangePrice = int(price * 100)
        exchangeAmount = int(amount * 100)
        exchangeOrderType = None
        if type == 'limit':
            exchangeOrderType = 0
        elif type == 'market':
            exchangeOrderType = 1
        elif type == 'MARKET_WITH_PROTECTION':
            exchangeOrderType = 2
        else:
            raise InvalidOrder('OrderType was not recognized: ' + type)
        exchangeOrderSide = None
        if side == 'buy':
            exchangeOrderSide = 0
        elif side == 'sell':
            exchangeOrderSide = 1
        else:
            raise InvalidOrder('OrderSide was not recognized: ' + side)
        timestamp = self.milliseconds()
        clientOrderIdFromParams = self.safe_integer(params, 'clientOrderId')
        clientOrderId = timestamp if (clientOrderIdFromParams is None) else clientOrderIdFromParams
        request = {
            'clientOrderId': clientOrderId,
            'requestId': self.safe_integer(params, 'requestId', 1),
            'marketId': rawMarketId,
            'price': exchangePrice,
            'quantity': exchangeAmount,
            'side': exchangeOrderSide,
            'timeInForce': self.safe_integer(params, 'timeInForce', 1),
            'orderType': exchangeOrderType,
            'selfTradePrevention': self.safe_integer(params, 'selfTradePrevention', 0),
            'postOnly': self.safe_integer(params, 'postOnly', 0),
            'cancelOnDisconnect': self.safe_bool(params, 'cancelOnDisconnect', False),
        }
        self.inject_sub_account_id(request, params)
        response = self.restOsmiumPrivatePostOrder(self.extend(request, params))
        order = self.safe_dict(self.safe_dict(response, 'result'), 'Ack')
        exchangeOrderId = self.safe_string(order, 'exchangeOrderId')
        fetchedOrder = self.fetch_raw_order(exchangeOrderId, marketId)
        return self.parse_order(
            {
                'order': order,
                'fetchedOrder': fetchedOrder,
            },
            market
        )

    def cancel_order(self, id: str, symbol: Str = None, params={}):
        """
        cancels an open order
        :see: https://cubexch.gitbook.io/cube-api/rest-osmium-api#order-1
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        marketId = self.safe_string(meta, 'marketId')
        market = self.safe_dict(meta, 'market')
        rawMarketId = self.safe_integer(self.safe_dict(market, 'info'), 'marketId')
        fetchedOrder = self.fetch_raw_order(id, marketId)
        if fetchedOrder is None:
            fetchedOrder = {}
        clientOrderId = int(self.safe_string(fetchedOrder, 'clientOrderId'))
        request = {
            'clientOrderId': clientOrderId,
            'requestId': self.safe_integer(params, 'requestId'),
            'marketId': rawMarketId,
        }
        self.inject_sub_account_id(request, params)
        response = self.restOsmiumPrivateDeleteOrder(self.extend(request, params))
        return self.parse_order(
            {
                'fetchedOrder': fetchedOrder,
                'cancellationResponse': response,
            },
            market
        )

    def cancel_all_orders(self, symbol: Str = None, params={}):
        """
        cancel all open orders
        :see: https://cubexch.gitbook.io/cube-api/rest-osmium-api#orders-1
        :param str symbol: cube cancelAllOrders cannot setting symbol, it will cancel all open orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        market = self.safe_dict(meta, 'market')
        rawMarkeId = self.safe_integer(self.safe_dict(market, 'info'), 'marketId')
        request = {
            'marketId': rawMarkeId,
            'requestId': self.safe_integer(params, 'requestId', 1),
            'side': self.safe_integer(params, 'side', None),
        }
        self.inject_sub_account_id(request, params)
        # TODO wrong response, it is needed to return the cancelled ordersnot !!
        return self.restOsmiumPrivateDeleteOrders(self.extend(request, params))

    def fetch_order(self, id: str, symbol: Str = None, params={}) -> Order:
        """
        fetches information on an order made by the user
        :see: https://cubexch.gitbook.io/cube-api/rest-osmium-api#orders
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        market = self.safe_dict(meta, 'market')
        request = {}
        self.inject_sub_account_id(request, params)
        rawResponse = self.restOsmiumPrivateGetOrders(self.extend(request, params))
        #
        #  {
        #      "result": {
        #          "orders": [
        #              {
        #                  "clientOrderId": 1713422528124,
        #                  "exchangeOrderId": 1295024967,
        #                  "marketId": 100006,
        #                  "price": 11000,
        #                  "orderQuantity": 1,
        #                  "side": 0,
        #                  "timeInForce": 1,
        #                  "orderType": 0,
        #                  "remainingQuantity": 1,
        #                  "restTime": 1713422528222471490,
        #                  "subaccountId": 38393,
        #                  "cumulativeQuantity": 0,
        #                  "cancelOnDisconnect": False
        #              },
        #              ...
        #          ]
        #      }
        #  }
        #
        result = self.safe_list(self.safe_dict(rawResponse, 'result'), 'orders')
        order = self.parse_order({'fetchedOrder': self.safe_value(result, 0)}, market)
        if order is not None:
            return order
        raise OrderNotFound('Order "' + id + '" not found.')

    def fetch_raw_order(self, id, symbol=None, params={}):
        """
        fetches information on an order made by the user
        :see: https://cubexch.gitbook.io/cube-api/rest-osmium-api#orders
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        request = {}
        self.inject_sub_account_id(request, params)
        rawResponse = self.restOsmiumPrivateGetOrders(self.extend(request, params))
        #
        # {
        #    "result": {
        #        "orders": [
        #            {
        #                "clientOrderId": 1713422528124,
        #                "exchangeOrderId": 1295024967,
        #                "marketId": 100006,
        #                "price": 11000,
        #                "orderQuantity": 1,
        #                "side": 0,
        #                "timeInForce": 1,
        #                "orderType": 0,
        #                "remainingQuantity": 1,
        #                "restTime": 1713422528222471490,
        #                "subaccountId": 38393,
        #                "cumulativeQuantity": 0,
        #                "cancelOnDisconnect": False
        #            },
        #            ...
        #        ]
        #    }
        # }
        #
        result = self.safe_list(self.safe_dict(rawResponse, 'result'), 'orders')
        return self.safe_value(result, 0)

    def fetch_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch all unfilled currently open orders
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        market = self.safe_market(self.safe_string(meta, 'marketId'), self.safe_dict(meta, 'market'))
        request = {}
        self.inject_sub_account_id(request, params)
        response = self.restIridiumPrivateGetUsersSubaccountSubaccountIdOrders(self.extend(request, params))
        rawOrders = self.safe_list(self.safe_dict(response, 'result'), 'orders')
        return self.parse_orders(rawOrders, market, since, limit)

    def parse_orders(self, orders: object, market: Market = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        #
        # the value of orders is either a dict or a list
        #
        # dict
        #
        #     {
        #         'id1': {...},
        #         'id2': {...},
        #         'id3': {...},
        #         ...
        #     }
        #
        # list
        #
        #     [
        #         {'id': 'id1', ...},
        #         {'id': 'id2', ...},
        #         {'id': 'id3', ...},
        #         ...
        #     ]
        #
        for i in range(0, orders):
            order = self.safe_dict(orders, i)
            order['id'] = self.safe_string(order, 'exchangeOrderId')
        results = []
        if isinstance(orders, list):
            for i in range(0, len(orders)):
                order = self.extend(self.parse_order(orders[i], market), params)
                results.append(order)
        else:
            ids = list(orders.keys())
            for i in range(0, len(ids)):
                id = ids[i]
                order = self.extend(self.parse_order(self.extend({'id': id}, orders[id]), market), params)
                results.append(order)
        results = self.sort_by(results, 'timestamp')
        symbol = market['symbol'] if (market is not None) else None
        return self.filter_by_symbol_since_limit(results, symbol, since, limit)

    def parse_order(self, order, market: Market = None):
        # transactionType = ''
        fetchedOrder = self.safe_dict(order, 'fetchedOrder')
        mainOrderObject = {}
        if order['cancellationResponse'] is not None:
            # transactionType = 'cancellation'
            mainOrderObject = self.safe_dict(order, 'cancellationResponse')
        else:
            # transactionType = 'creation'
            mainOrderObject = self.safe_dict(order, 'order')
        timestampInNanoseconds = self.safe_number(mainOrderObject, 'transactTime')
        timestampInMilliseconds = timestampInNanoseconds / 1000000
        # orderStatus = ''  # TODO fix not !!
        # if list(fetchedOrder).'length == 0.keys():
        #     orderStatus = 'canceled'
        # else:
        #     orderStatus = 'open'
        # }
        result = {}
        # TODO Improve self part to reuse the original response from create, cancel, instead of relying in the fetched ordernot !!
        if fetchedOrder and not (len(fetchedOrder) == 0):
            exchangeOrderId = self.safe_integer(fetchedOrder, 'exchangeOrderId')
            clientOrderId = self.safe_integer(fetchedOrder, 'clientOrderId')
            orderSide = self.safe_integer(fetchedOrder, 'side') == 'buy' if 0 else 'sell'
            price = self.safe_integer(fetchedOrder, 'price') / 100
            symbol = self.safe_string(market, 'base') + '/' + self.safe_string(market, 'quote')
            amount = self.safe_integer(fetchedOrder, 'orderQuantity')
            remainingAmount = self.safe_integer(fetchedOrder, 'remainingQuantity')
            filledAmount = amount - remainingAmount
            currency = ''
            if orderSide == 'buy':
                currency = self.safe_string(market, 'base')
            else:
                currency = self.safe_string(market, 'quote')
            orderType = ''
            orderTypeRaw = self.safe_integer(fetchedOrder, 'orderType')
            if orderTypeRaw == 0:
                orderType = 'limit'
            elif orderTypeRaw == 1:
                orderType = 'market'
            elif orderTypeRaw == 2:
                orderType = 'MARKET_WITH_PROTECTION'
            else:
                raise InvalidOrder('OrderType was not recognized while parsing: ' + orderTypeRaw)
            timeInForce = ''
            timeInForceRaw = self.safe_integer(fetchedOrder, 'timeInForce')
            if timeInForceRaw == 0:
                timeInForce = 'IOC'
            elif timeInForceRaw == 1:
                timeInForce = 'GTC'
            elif timeInForceRaw == 2:
                timeInForce = 'FOK'
            else:
                raise InvalidOrder('TimeInForce was not recognized while parsing: ' + timeInForceRaw)
            tradeFeeRatios = self.safe_string(self.fees, 'trading')
            rate = orderSide == self.safe_string(tradeFeeRatios, 'maker') if 'buy' else self.safe_string(tradeFeeRatios, 'taker')
            decimalAmount = amount / 100
            decimalFilledAmount = filledAmount / 100
            decimalRemainingAmount = remainingAmount / 100
            cost = filledAmount * price
            feeCost = decimalAmount * float(rate)
            result = {
                'id': exchangeOrderId,
                'clientOrderId': clientOrderId,
                'datetime': self.iso8601(timestampInMilliseconds),
                'timestamp': timestampInMilliseconds,
                'lastTradeTimestamp': timestampInMilliseconds,
                'status': 'open',
                'symbol': symbol,
                'type': orderType,
                'timeInForce': timeInForce,
                'side': orderSide,
                'price': price,
                'average': 0.06917684,
                'amount': decimalAmount,
                'filled': decimalFilledAmount,
                'remaining': decimalRemainingAmount,
                'cost': cost,
                'trades': [],  # TODO: Implement trades
                'fee': {
                    'currency': currency,  # a deduction from the asset hasattr(self, received) trade
                    'cost': feeCost,
                    'rate': rate,
                },
                'info': {
                    'mainOrderObjetc': mainOrderObject,
                    'fetchedOrder': fetchedOrder,
                },
            }
        return self.safe_order(result)

    def fetch_open_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}):
        """
        fetch all unfilled currently open orders
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        market = self.safe_dict(meta, 'market')
        request = {}
        self.inject_sub_account_id(request, params)
        response = self.restOsmiumPrivateGetOrders(self.extend(request, params))
        rawOrders = self.safe_list(self.safe_dict(response, 'result'), 'orders')
        return self.parse_orders(rawOrders, market, since, limit)

    def fetch_orders_all_markets(self, since=None, limit=None):
        """
        fetch all orders from all markets
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        request = {}
        self.inject_sub_account_id(request, {})
        response = self.restIridiumPrivateGetUsersSubaccountSubaccountIdOrders(self.extend(request))
        rawOrders = self.safe_list(self.safe_dict(response, 'result'), 'orders')
        return rawOrders

    def fetch_trades(self, symbol: str, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol
        :see: https://cubexch.gitbook.io/cube-api/rest-mendelev-api#book-market_id-recent-trades
        :see: https://cubexch.gitbook.io/cube-api/rest-mendelev-api#parsed-book-market_symbol-recent-trades
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum number of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int params['lastId']: order id
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        market = self.safe_dict(meta, 'market')
        rawMarketId = self.safe_string(self.safe_dict(market, 'info'), 'marketId')
        rawMarketSymbol = self.safe_string(self.safe_dict(market, 'info'), 'symbol')
        request = None
        request = {
            'market_id': rawMarketId,
        }
        recentTradesResponse = self.restMendelevPublicGetBookMarketIdRecentTrades(self.extend(request, params))
        #
        # {
        #     "result":{
        #         "trades":[
        #             {
        #                 "tradeId":1192726,
        #                 "price":25730,
        #                 "aggressingSide":1,
        #                 "restingExchangeOrderId":775000423,
        #                 "fillQuantity":2048,
        #                 "transactTime":1710261845127064300,
        #                 "aggressingExchangeOrderId":775000298
        #             },
        #             {
        #                 "tradeId":1192723,
        #                 "price":25730,
        #                 "aggressingSide":0,
        #                 "restingExchangeOrderId":775000298,
        #                 "fillQuantity":5000,
        #                 "transactTime":1710261844303742500,
        #                 "aggressingExchangeOrderId":774996895
        #             }
        #         ]
        #     }
        # }
        #
        request = {
            'market_symbol': rawMarketSymbol,
        }
        parsedRecentTradesResponse = self.restMendelevPublicGetParsedBookMarketSymbolRecentTrades(self.extend(request, params))
        #
        # {
        #     "result":{
        #         "ticker_id":"BTCUSDC",
        #         "trades":[
        #             {
        #                 "id":1106939,
        #                 "p":63565.6,
        #                 "q":0.01,
        #                 "side":"Ask",
        #                 "ts":1711153560907
        #             },
        #             {
        #                 "id":1107084,
        #                 "p":63852.9,
        #                 "q":0.01,
        #                 "side":"Bid",
        #                 "ts":1711156552440
        #             }
        #         ]
        #     }
        # }
        #
        rawTrades = {
            'trades': self.safe_list(self.safe_dict(recentTradesResponse, 'result'), 'trades'),
            'parsedTrades': self.safe_list(self.safe_dict(parsedRecentTradesResponse, 'result'), 'trades'),
        }
        return self.parse_trades(rawTrades, market)

    def parse_trades(self, rawTrades, market=None):
        parsedTradesObject = self.safe_dict(rawTrades, 'parsedTrades')
        finalTrades = []
        if parsedTradesObject and isinstance(parsedTradesObject, dict):
            parsedTrades = list(parsedTradesObject.values())
            for i in range(0, len(parsedTrades)):
                trade = parsedTrades[i]
                finalTrades.append(self.parse_trade(trade, market))
        return finalTrades

    def parse_trade(self, trade, market=None):
        timestampSeconds = 0
        if trade['ts'] is not None:
            timestampSeconds = self.safe_integer(trade, 'ts')
        elif trade['transactTime'] is not None:
            timestampNanoseconds = trade['transactTime']
            timestampSeconds = timestampNanoseconds / 1000000
        datetime = self.iso8601(timestampSeconds)
        tradeSide = self.safe_string(trade, 'side')
        side = ''
        if tradeSide == 'Bid':
            side = 'buy'
        elif tradeSide == 'Ask':
            side = 'sell'
        marketSymbol = self.safe_string(market, 'symbol')
        price = float(self.safe_string(trade, 'p'))
        amount = float(self.safe_string(trade, 'q'))
        return self.safe_trade({
            'info': trade,
            'timestamp': timestampSeconds,
            'datetime': datetime,
            'symbol': marketSymbol,
            'id': self.safe_string(trade, 'id'),
            'order': None,
            'type': None,
            'takerOrMaker': None,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': None,
            'fee': None,
            'fees': [
                {
                    'cost': None,
                    'currency': None,
                    'rate': None,
                },
            ],
        }, market)

    def fetch_trading_fee(self, symbol: str, params={}) -> TradingFeeInterface:
        """
        fetch the trading fees for a market
        :see: https://cubexch.gitbook.io/cube-api/rest-iridium-api#users-fee-estimate-market-id
        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `fee structure <https://docs.ccxt.com/#/?id=fee-structure>`
        """
        meta = self.fetch_market_meta(symbol)
        symbol = self.safe_string(meta, 'symbol')
        market = self.safe_dict(meta, 'market')
        rawMarketId = self.safe_integer(self.safe_dict(market, 'info'), 'marketId')
        request = {
            'market_id': rawMarketId,
        }
        response = self.restIridiumPrivateGetUsersFeeEstimateMarketId(self.extend(request, params))
        # {
        #     "result": {
        #         "userKey": "123e4567-e89b-12d3-a456-426614174000",
        #         "makerFeeRatio": 0,
        #         "takerFeeRatio": 0
        #     }
        # }
        return {
            'info': response,
            'symbol': symbol,
            'maker': self.safe_number(self.safe_dict(response, 'result'), 'makerFeeRatio'),
            'taker': self.safe_number(self.safe_dict(response, 'result'), 'takerFeeRatio'),
            'percentage': None,
            'tierBased': None,
        }

    def fetch_my_trades(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        raise NotSupported(self.id + ' fetchMyTrades() is not supported yet')

    def fetch_closed_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        if self.has['fetchOrders']:
            orders = self.fetch_orders(symbol, since, limit, params)
            return self.filter_by(orders, 'status', 'closed')
        raise NotSupported(self.id + ' fetchClosedOrders() is not supported yet')

    def fetch_status(self, params={}):
        raise NotSupported(self.id + ' fetchStatus() is not supported yet')

    def withdraw(self, code: str, amount: float, address: str, tag=None, params={}) -> Transaction:
        """
        make a withdrawal
        :see: https://binance-docs.github.io/apidocs/spot/en/#withdraw-user_data
        :param str code: unified currency code
        :param float amount: the amount to withdraw
        :param str address: the address to withdraw to
        :param str tag:
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `transaction structure <https://docs.ccxt.com/#/?id=transaction-structure>`
        """
        raise NotSupported(self.id + ' withdraw() is not supported yet')
