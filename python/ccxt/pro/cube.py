# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

import ccxt.async_support
from ccxt.base.types import Int, OrderBook


class cube(ccxt.async_support.cube):

    def describe(self):
        # TODO check all infonot !!
        return self.deep_extend(super(cube, self).describe(), {
            'has': {
                'ws': True,
                'watchBalance': False,
                'watchMyTrades': False,
                'watchOHLCV': False,
                'watchOHLCVForSymbols': False,
                'watchOrderBook': True,
                'watchOrderBookForSymbols': False,
                'watchOrders': False,
                'watchOrdersForSymbols': False,
                'watchPositions': False,
                'watchTicker': False,
                'watchTickers': False,
                'watchTrades': False,
                'watchTradesForSymbols': False,
                'createOrderWs': False,
                'editOrderWs': False,
                'cancelOrderWs': False,
                'cancelOrdersWs': False,
                'cancelAllOrdersWs': False,
                'fetchBalanceWs': False,
                'fetchDepositsWs': False,
                'fetchMarketsWs': False,
                'fetchMyTradesWs': False,
                'fetchOHLCVWs': False,
                'fetchOpenOrdersWs': False,
                'fetchOrderWs': False,
                'fetchOrdersWs': False,
                'fetchTradesWs': False,
                'fetchTradingFeesWs': False,
                'fetchWithdrawalsWs': False,
            },
            'urls': {
                'api': {
                    'ws': {
                        'production': {
                            'iridium': 'wss://api.cube.exchange/ir',
                            'mendelev': 'wss://api.cube.exchange/md',
                            'osmium': 'wss://api.cube.exchange/os',
                        },
                        'staging': {
                            'iridium': 'wss://staging.cube.exchange/ir',
                            'mendelev': 'wss://staging.cube.exchange/md',
                            'osmium': 'wss://staging.cube.exchange/os',
                        },
                    },
                },
            },
            'options': {
                'environment': 'production',
                'api': {
                    'ws': {
                        'mendelev': {
                            'public': {
                                'orderbook': '/book/:market_id',
                                'orderbookTops': '/tops',
                            },
                        },
                    },
                },
            },
        })

    async def watch_order_book(self, symbol: str, limit: Int = None, params={}) -> OrderBook:
        """
        watches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :see: https://cubexch.gitbook.io/cube-api/websocket-market-data-api#order-book-data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        await self.load_markets()
        environment = self.options['environment']
        marketId = symbol.lower()
        market = self.market(marketId)
        symbol = self.safe_symbol(marketId, market)
        url = self.urls['api']['ws'][environment]['mendelev'] + self.options['api']['ws']['mendelev']['public']['orderbook']
        requestId = ''
        subParams = []
        request = {
            'method': 'SUBSCRIBE',
            'params': subParams,
            'id': requestId,
        }
        messageHash = ''
        return await self.watch(url, messageHash, request, messageHash)
