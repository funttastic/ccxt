<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\cube as Exchange;

class cube extends Exchange {

    public function describe() {
        // TODO verify all!!!
        return $this->deep_extend(parent::describe(), array(
            'id' => 'cube',
            'name' => 'cube',
            'countries' => array(),
            'rateLimit' => 100,
            'version' => 'v0',
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createDepositAddress' => false,
                'createMarketOrder' => false,
                'createOrder' => true,
                'createOrders' => false,
                'createPostOnlyOrder' => false,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDeposit' => false,
                'fetchDepositAddress' => false,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => false,
                'fetchDepositsWithdrawals' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarketLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterest' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => false,
                'fetchPermissions' => false,
                'fetchPosition' => false,
                'fetchPositions' => false,
                'fetchPositionsForSymbol' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'fetchTradingLimits' => false,
                'fetchTransactionFee' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawAddresses' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMargin' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'signIn' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'urls' => array(
                'referral' => '',
                'logo' => 'https://github.com/ccxt/ccxt/assets/43336371/3aa748b7-ea44-45e9-a9e7-b1d207a2578a',
                'api' => array(
                    'rest' => array(
                        'production' => array(
                            'iridium' => 'https://api.cube.exchange/ir/v0',
                            'mendelev' => 'https://api.cube.exchange/md/v0',
                            'osmium' => 'https://api.cube.exchange/os/v0',
                        ),
                        'staging' => array(
                            'iridium' => 'https://staging.cube.exchange/ir/v0',
                            'mendelev' => 'https://staging.cube.exchange/md/v0',
                            'osmium' => 'https://staging.cube.exchange/os/v0',
                        ),
                    ),
                    'ws' => array(
                        'production' => array(
                            'iridium' => 'wss://api.cube.exchange/ir',
                            'mendelev' => 'wss://api.cube.exchange/md',
                            'osmium' => 'wss://api.cube.exchange/os',
                        ),
                        'staging' => array(
                            'iridium' => 'wss://staging.cube.exchange/ir',
                            'mendelev' => 'wss://staging.cube.exchange/md',
                            'osmium' => 'wss://staging.cube.exchange/os',
                        ),
                    ),
                ),
                'www' => 'https://www.cube.exchange/',
                'doc' => 'https://cubexch.gitbook.io/cube-api',
                'fees' => 'hhttps://www.cube.exchange/fees',
            ),
            'fees' => array(
                'trading' => array(
                    'maker' => $this->parse_number('0.004'),
                    'taker' => $this->parse_number('0.008'),
                ),
            ),
            'api' => array(
                'rest' => array(
                    'iridium' => array(
                        'public' => array(
                            'get' => array(
                                '/markets' => 1,
                            ),
                        ),
                        'private' => array(
                            'get' => array(
                                '/users/check' => 1,
                                '/users/info' => 1,
                                '/users/positions' => 1,
                                '/users/transfers' => 1,
                                '/users/deposits' => 1,
                                '/users/withdrawals' => 1,
                                '/users/subaccount/{subaccountId}/orders' => 1,
                                '/users/subaccount/{subaccountId}/fills' => 1,
                                '/users/fee-estimate/{market_id}' => 1,
                            ),
                            'post' => array(
                                '/users/subaccounts' => 1,
                                '/users/subaccounts/{subaccount_id}' => 1,
                            ),
                        ),
                    ),
                    'mendelev' => array(
                        'public' => array(
                            'get' => array(
                                '/book/{market_id}/snapshot' => 1,
                                '/parsed/book/{market_symbol}/snapshot' => 1,
                                '/book/{market_id}/recent-trades' => 1,
                                '/parsed/book/{market_symbol}/recent-trades' => 1,
                                '/tickers/snapshot' => 1,
                                '/parsed/tickers' => 1,
                            ),
                        ),
                    ),
                    'osmium' => array(
                        'private' => array(
                            'get' => array(
                                '/orders' => 1,
                            ),
                            'delete' => array(
                                '/orders' => 1,
                                '/order' => 1,
                            ),
                            'post' => array(
                                '/order' => 1,
                            ),
                            'patch' => array(
                                '/order' => 1,
                            ),
                        ),
                    ),
                ),
            ),
            'commonCurrencies' => array(),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    'Must be authorized' => '\\ccxt\\AuthenticationError',
                    'Market not found' => '\\ccxt\\BadRequest',
                    'Insufficient funds' => '\\ccxt\\InsufficientFunds',
                    'Order not found' => '\\ccxt\\BadRequest',
                ),
            ),
            'options' => array(
                'environment' => 'production',
            ),
        ));
    }

    public function generate_signature(): mixed {
        $timestamp = (int) floor($this->now() / 1000);
        $timestampBuffer = $this->number_to_le($timestamp, 4);
        $fixedString = 'cube.xyz';
        $payload = $this->binary_concat_array(array( $fixedString, $timestampBuffer ));
        $secretKeyBytes = base64_decode(base64_encode($this->secret));
        $hmac = $this->hmac($payload, $secretKeyBytes, 'sha256', 'binary');
        $signatureB64 = $this->binary_to_base64($hmac);
        return array( $signatureB64, $timestamp );
    }

    public function generate_authentication_headers(): mixed {
        list($signature, $timestamp) = $this->generate_signature();
        return array(
            'x-api-key' => $this->apiKey,
            'x-api-signature' => $signature,
            'x-api-timestamp' => (string) $timestamp,
        );
    }

    public function authenticate_request(mixed $request): mixed {
        $headers = $this->safe_dict($request, 'headers', array());
        $request->headers = array_merge($headers, $this->generate_authentication_headers());
        return $request;
    }

    public function sign(string $path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $environment = $this->options['environment'];
        $baseUrl = null;
        if (mb_strpos($api, 'iridium') !== false) {
            $baseUrl = $this->urls['api']['rest'][$environment]['iridium'];
        } elseif (mb_strpos($api, 'mendelev') !== false) {
            $baseUrl = $this->urls['api']['rest'][$environment]['mendelev'];
        } elseif (mb_strpos($api, 'osmium') !== false) {
            $baseUrl = $this->urls['api']['rest'][$environment]['osmium'];
        }
        $url = $baseUrl . $this->implode_params($path, $params);
        $params = $this->omit($params, $this->extract_params($path));
        if ($method === 'GET') {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        if (mb_strpos($api, 'private') !== false) {
            $request = array(
                'body' => $body,
                'headers' => array(
                    'Content-Type' => 'application/json',
                    'Referer' => 'CCXT',
                ),
            );
            $request = $this->authenticate_request($request);
            $headers = $request->headers;
            if ($method !== 'GET') {
                $body = $this->urlencode($params);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function fetch_currencies($params = array ()): array {
        /**
         * fetches all available currencies on an exchange
         * @see https://cubexch.gitbook.io/cube-api/rest-iridium-api#markets
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an associative dictionary of currencies
         */
        $response = $this->restIridiumPublicGetMarkets ($params);
        // {
        //     "result" => {
        //         "assets" => array(
        //             array(
        //                 "assetId" => 1,
        //                 "symbol" => "BTC",
        //                 "decimals" => 8,
        //                 "displayDecimals" => 5,
        //                 "settles" => true,
        //                 "assetType" => "Crypto",
        //                 "sourceId" => 1,
        //                 "metadata" => array(
        //                     "dustAmount" => 3000
        //                 ),
        //                 "status" => 1
        //             ),
        //             ...
        //         ),
        //         "sources" => array(
        //             array(
        //                 "sourceId" => 0,
        //                 "name" => "fiat",
        //                 "metadata" => array()
        //             ),
        //             ...
        //         ),
        //         "markets" => array(
        //             array(
        //                 "marketId" => 100004,
        //                 "symbol" => "BTCUSDC",
        //                 "baseAssetId" => 1,
        //                 "baseLotSize" => "1000",
        //                 "quoteAssetId" => 7,
        //                 "quoteLotSize" => "1",
        //                 "priceDisplayDecimals" => 2,
        //                 "protectionPriceLevels" => 3000,
        //                 "priceBandBidPct" => 25,
        //                 "priceBandAskPct" => 400,
        //                 "priceTickSize" => "0.1",
        //                 "quantityTickSize" => "0.00001",
        //                 "status" => 1,
        //                 "feeTableId" => 2
        //             ),
        //             ...
        //         ),
        //         "feeTables" => array(
        //             {
        //                 "feeTableId" => 1,
        //                 "feeTiers" => array(
        //                     array(
        //                         "priority" => 0,
        //                         "makerFeeRatio" => 0.0,
        //                         "takerFeeRatio" => 0.0
        //                     }
        //                 )
        //             ),
        //             {
        //                 "feeTableId" => 2,
        //                 "feeTiers" => array(
        //                     {
        //                         "priority" => 0,
        //                         "makerFeeRatio" => 0.0004,
        //                         "takerFeeRatio" => 0.0008
        //                     }
        //                 )
        //             }
        //         )
        //     }
        // }
        $result => Currencies = array();
        $rawCurrencies = $this->safe_dict(
            $this->safe_dict($response, 'result'),
            'assets'
        );
        for ($i = 0; $i < count($rawCurrencies); $i++) {
            $rawCurrency = $rawCurrencies[$i];
            $id = $this->safe_string_upper($rawCurrency, 'symbol');
            $code = $this->safe_currency_code($id);
            // TODO verify!!!
            $currency = $this->safe_currency_structure(array(
                'id' => $id,
                'numericId' => $this->safe_integer($rawCurrency, 'assetId'),
                'code' => $this->safe_string_upper($rawCurrency, 'symbol'),
                'precision' => $this->safe_integer($rawCurrency, 'decimals'),
                'type' => $this->safe_string_lower($rawCurrency, 'assetType'),
                'name' => $this->safe_string($rawCurrency, 'symbol'),
                'active' => $this->safe_integer($rawCurrency, 'status') === 1,
                'deposit' => null,
                'withdraw' => null,
                'fee' => null,
                'fees' => array(),
                'networks' => array(),
                'limits' => array(
                    'deposit' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $rawCurrency,
            ));
            $result[$code] = $currency;
        }
        return $result;
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        $tickers = $this->fetch_tickers(array( $symbol ), $params);
        $ticker = $this->safe_value($tickers, $symbol, null);
        if ($ticker === null) {
            throw new BadSymbol($this->id . ' fetchTicker() $symbol ' . $symbol . ' not found');
        }
        return $ticker;
    }

    public function fetch_tickers($symbols = null, $params = array ()): array {
        /**
         * fetches the $ticker for all markets
         * @see https://cubexch.gitbook.io/cube-api/rest-mendelev-api#tickers-snapshot
         * @param {string[]} [$symbols] an array of $symbols to fetch the tickers for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of tickers indexed by symbol
         */
        $response = $this->restMendelevPublicGetParsedTickers ($params);
        // {
        //   "result" => array(
        //     array(
        //       "ask" => 101.17,
        //       "base_currency" => "SOL",
        //       "base_volume" => 29332.58,
        //       "bid" => 101.16,
        //       "high" => 109.69,
        //       "last_price" => 101.17,
        //       "low" => 100.23,
        //       "open" => 107.72,
        //       "quote_currency" => "USDC",
        //       "quote_volume" => 3062431.887,
        //       "ticker_id" => "SOLUSDC",
        //       "timestamp" => 1708521090000
        //     ),
        //     ...
        //   )
        // }
        $result = array();
        $rawTickers = $this->safe_list($response, 'result', array());
        for ($i = 0; $i < count($rawTickers); $i++) {
            if ($symbols !== null && !$this->in_array($this->safe_string($rawTickers[$i], 'ticker_id'), $symbols)) {
                $rawTicker = $this->safe_dict($rawTickers, $i);
                $ticker = $this->parse_ticker($rawTicker);
                $result[$ticker->symbol] = $ticker;
            }
        }
        return $result;
    }

    public function parse_ticker(array $ticker): array {
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $symbol = $this->safe_string($ticker, 'ticker_id');
        $baseVolume = $this->safe_number($ticker, 'base_volume');
        $quoteVolume = $this->safe_number($ticker, 'quote_volume');
        $last = $this->safe_number($ticker, 'last_price');
        $high = $this->safe_number($ticker, 'high');
        $low = $this->safe_number($ticker, 'low');
        $bid = $this->safe_number($ticker, 'bid');
        $ask = $this->safe_number($ticker, 'ask');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => $this->safe_number($ticker, 'open'),
            'close' => null,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ));
    }

    public function fetch_markets($params = array ()): array {
        /**
         * retrieves data on all markets for cube
         * @see https://cubexch.gitbook.io/cube-api/rest-iridium-api#markets
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $response = $this->restIridiumPublicGetMarkets ($params);
        // {
        //     "result" => {
        //         "assets" => array(
        //             array(
        //                 "assetId" => 1,
        //                 "symbol" => "BTC",
        //                 "decimals" => 8,
        //                 "displayDecimals" => 5,
        //                 "settles" => true,
        //                 "assetType" => "Crypto",
        //                 "sourceId" => 1,
        //                 "metadata" => array(
        //                     "dustAmount" => 3000
        //                 ),
        //                 "status" => 1
        //             ),
        //             ...
        //         ),
        //         "sources" => array(
        //             array(
        //                 "sourceId" => 0,
        //                 "name" => "fiat",
        //                 "metadata" => array()
        //             ),
        //             ...
        //         ),
        //         "markets" => array(
        //             array(
        //                 "marketId" => 100004,
        //                 "symbol" => "BTCUSDC",
        //                 "baseAssetId" => 1,
        //                 "baseLotSize" => "1000",
        //                 "quoteAssetId" => 7,
        //                 "quoteLotSize" => "1",
        //                 "priceDisplayDecimals" => 2,
        //                 "protectionPriceLevels" => 3000,
        //                 "priceBandBidPct" => 25,
        //                 "priceBandAskPct" => 400,
        //                 "priceTickSize" => "0.1",
        //                 "quantityTickSize" => "0.00001",
        //                 "status" => 1,
        //                 "feeTableId" => 2
        //             ),
        //             ...
        //         ),
        //         "feeTables" => array(
        //             {
        //                 "feeTableId" => 1,
        //                 "feeTiers" => array(
        //                     array(
        //                         "priority" => 0,
        //                         "makerFeeRatio" => 0.0,
        //                         "takerFeeRatio" => 0.0
        //                     }
        //                 )
        //             ),
        //             {
        //                 "feeTableId" => 2,
        //                 "feeTiers" => array(
        //                     {
        //                         "priority" => 0,
        //                         "makerFeeRatio" => 0.0004,
        //                         "takerFeeRatio" => 0.0008
        //                     }
        //                 )
        //             }
        //         )
        //     }
        // }
        $result = array();
        $rawMarkets = $this->safe_dict($this->safe_dict($response, 'result'), 'markets');
        $rawAssets = $this->safe_dict(
            $this->safe_dict($response, 'result'),
            'assets'
        );
        for ($i = 0; $i < count($rawMarkets); $i++) {
            $rawMarket = $this->safe_dict($rawMarkets, $i);
            $id = $this->safe_string_lower($rawMarket, 'symbol');
            $rawBaseAsset = null;
            for ($j = 0; $j < count($rawAssets); $j++) {
                if ($this->safe_string($this->safe_dict($rawAssets, $j), 'assetId') === $this->safe_string($rawMarket, 'baseAssetId')) {
                    $rawBaseAsset = $this->safe_dict($rawAssets, $j);
                    break;
                }
            }
            $rawQuoteAsset = null;
            for ($j = 0; $j < count($rawAssets); $j++) {
                if ($this->safe_string($this->safe_dict($rawAssets, $j), 'assetId') === $this->safe_string($rawMarket, 'quoteAssetId')) {
                    $rawQuoteAsset = $this->safe_dict($rawAssets, $j);
                    break;
                }
            }
            $baseId = $this->safe_string_upper($rawBaseAsset, 'symbol');
            $quoteId = $this->safe_string_upper($rawQuoteAsset, 'symbol');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $market = $this->safe_market_structure(array(
                'id' => $id,
                'lowercaseId' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => $this->safe_integer($rawMarket, 'status') === 1,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'taker' => $this->safe_number($this->safe_dict($this->fees, 'trading'), 'taker'),
                'maker' => $this->safe_number($this->safe_dict($this->fees, 'trading'), 'maker'),
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->parse_number(
                        $this->parse_precision($this->safe_string($rawMarket, 'quantityTickSize'))
                    ),
                    'price' => $this->parse_number(
                        $this->parse_precision($this->safe_string($rawMarket, 'priceTickSize'))
                    ),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'created' => null,
                'info' => $rawMarket,
            ));
            $result[] = $market;
        }
        return $result;
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://cubexch.gitbook.io/cube-api/rest-mendelev-api#book-market_id-snapshot
         * @see https://cubexch.gitbook.io/cube-api/rest-mendelev-api#parsed-book-market_symbol-snapshot
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $marketId = strtolower($symbol);
        $market = $this->market($marketId);
        $marketInfo = $this->safe_dict($market, 'info');
        $symbolFromInfo = $this->safe_string($marketInfo, 'symbol');
        $request = array( 'market_symbol' => $symbolFromInfo );
        $response = $this->restMendelevPublicGetParsedBookMarketSymbolSnapshot (array_merge($request, $params));
        //
        // {
        //   "result":{
        //       "ticker_id":"BTCUSDC",
        //       "timestamp":1711544655331,
        //       "bids":array(
        //           array(
        //               70635.6,
        //               0.01
        //           )
        //       ),
        //       "asks":array(
        //           array(
        //               70661.8,
        //               0.1421
        //           )
        //       )
        //   }
        // }
        //
        $rawBids = $this->safe_list($this->safe_dict($response, 'result'), 'bids', array());
        $rawAsks = $this->safe_list($this->safe_dict($response, 'result'), 'asks', array());
        $rawOrderbook = array(
            'bids' => $rawBids,
            'asks' => $rawAsks,
        );
        $timestamp = $this->safe_timestamp($this->safe_dict($response, 'result'), 'timestamp');
        return $this->parse_order_book($rawOrderbook, $symbol, $timestamp, 'bids', 'asks');
    }

    public function parse_bids_asks($bidasks, int|string $priceKey = 0, int|string $amountKey = 1, int|string $countOrIdKey = 2): array {
        return $bidasks;
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * get the list of most recent trades for a particular $symbol
         * @see https://cubexch.gitbook.io/cube-api/rest-mendelev-api#book-market_id-recent-trades
         * @see https://cubexch.gitbook.io/cube-api/rest-mendelev-api#parsed-book-market_symbol-recent-trades
         * @param {string} $symbol unified $symbol of the $market to fetch trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum number of trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} $params->lastId order id
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array();
        // $response = $this->restMendelevPublicGetParsedBookMarketIdRecentTrades($this->extend($request, $params));
        //
        // {
        //     "result":{
        //         "trades":array(
        //             array(
        //                 "tradeId":1192726,
        //                 "price":25730,
        //                 "aggressingSide":1,
        //                 "restingExchangeOrderId":775000423,
        //                 "fillQuantity":2048,
        //                 "transactTime":1710261845127064300,
        //                 "aggressingExchangeOrderId":775000298
        //             ),
        //             {
        //                 "tradeId":1192723,
        //                 "price":25730,
        //                 "aggressingSide":0,
        //                 "restingExchangeOrderId":775000298,
        //                 "fillQuantity":5000,
        //                 "transactTime":1710261844303742500,
        //                 "aggressingExchangeOrderId":774996895
        //             }
        //         )
        //     }
        // }
        //
        $response = $this->restMendelevPublicGetParsedBookMarketSymbolRecentTrades (array_merge($request, $params));
        //
        // {
        //     "result":{
        //         "ticker_id":"BTCUSDC",
        //         "trades":array(
        //             array(
        //                 "id":1106939,
        //                 "p":63565.6,
        //                 "q":0.01,
        //                 "side":"Ask",
        //                 "ts":1711153560907
        //             ),
        //             {
        //                 "id":1107084,
        //                 "p":63852.9,
        //                 "q":0.01,
        //                 "side":"Bid",
        //                 "ts":1711156552440
        //             }
        //         )
        //     }
        // }
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade($trade, ?array $market = null): array {
        throw Error ('Not implemented!'); // TODO fix!!!
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://cubexch.gitbook.io/cube-api/rest-iridium-api#users-positions
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $this->load_markets();
        $response = $this->restIridiumPrivateGetUsersPositions ($params);
        $result = $this->safe_dict($response, 'balances', array());
        return $this->parse_balances($result);
    }

    public function parse_balances($response): array {
        // TODO fill and fix!!!
        return $this->safe_balance(array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
            'free' => array(),
            'used' => array(),
            'total' => array(),
        ));
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        /**
         * create a trade order
         * @see https://cubexch.gitbook.io/cube-api/rest-osmium-api#order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit' or 'STOP_LOSS' or 'STOP_LOSS_LIMIT' or 'TAKE_PROFIT' or 'TAKE_PROFIT_LIMIT' or 'STOP'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of you want to trade in units of the base currency
         * @param {float} [$price] the $price that the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        // $marketId = strtolower($symbol);
        $market = $this->market($symbol);
        $rawMarketId = $this->safe_integer($this->safe_dict($market, 'info'), 'marketId');
        $exchangePrice = $price * 100;
        $exchangeAmount = $amount * 100;
        $exchangeSide = 1; // TODO fix!!!
        $exchangeOrderType = 0; // TODO fix!!!
        $request = array(
            'clientOrderId' => $this->safe_integer($params, 'clientOrderId'),
            'requestId' => $this->safe_integer($params, 'requestId'),
            'marketId' => $rawMarketId,
            'price' => $exchangePrice,
            'quantity' => $exchangeAmount,
            'side' => $exchangeSide,
            'timeInForce' => $this->safe_integer($params, 'timeInForce'),
            'orderType' => $exchangeOrderType,
            'subaccountId' => $this->safe_integer($params, 'subaccountId'),
            'selfTradePrevention' => $this->safe_integer($params, 'selfTradePrevention'),
            'postOnly' => $this->safe_integer($params, 'postOnly'),
            'cancelOnDisconnect' => $this->safe_bool($params, 'cancelOnDisconnect'),
        );
        $response = $this->restOsmiumPrivatePostOrder (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        // IMPLEMENTAR A LÓGICA!!!
        $this->load_markets();
        $request = array(
            'uuid' => $id,
        );
        $response = $this->restOsmiumPrivateDeleteOrder (array_merge($request, $params));
        return $this->parse_order($response);
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        /**
         * cancel all open orders
         * @param {string} $symbol alpaca cancelAllOrders cannot setting $symbol, it will cancel all open orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        return $this->cancel_order('all', $symbol, $params);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch all unfilled currently open orders
         * @param {string} $symbol unified $market $symbol of the $market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        // IMPLEMENTAR A LÓGICA!!!
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array();
        if ($symbol !== null) {
            $request['market'] = $market['id'];
        }
        $response = $this->restOsmiumPrivateGetOrders (array_merge($request, $params));
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-status
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $request = array();
        $response = $this->restOsmiumPrivateGetOrders (array_merge($request, $params));
        $rawOrders = $this->safe_dict($this->safe_dict($response, 'result'), 'orders');
        $targetRawOrder = null;
        for ($i = 0; $i < count($rawOrders); $i++) {
            $rawOrder = $rawOrders[$i];
            $rawOrderId = $this->safe_string($rawOrder, 'orderId');
            if ($rawOrderId === $id) {
                $targetRawOrder = $rawOrder;
            }
        }
        if ($targetRawOrder) {
            return $this->parse_order($targetRawOrder, null);
        }
        throw new OrderNotFound('Order "' . $id . '" not found.');
    }

    public function parse_order($order, ?array $market = null): array {
        return $this->safe_order(array());
    }
}
