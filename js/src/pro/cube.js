// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

// ----------------------------------------------------------------------------
import cubeRest from '../../src/cube.js';
import {InvalidOrder} from "../base/errors.js";
import { default as protobuf } from '../../../js/src/static_dependencies/protobufjs/light.js';
// -----------------------------------------------------------------------------

export default class cube extends cubeRest {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'cancelOrderWs': false,
                'cancelOrdersWs': false,
                'cancelAllOrdersWs': false,
                'createOrderWs': true,
                'editOrderWs': false,
                'fetchBalanceWs': false,
                'fetchDepositsWs': false,
                'fetchMarketsWs': false,
                'fetchMyTradesWs': false,
                'fetchOHLCVWs': false,
                'fetchOpenOrdersWs': false,
                'fetchOrderWs': false,
                'fetchOrdersWs': false,
                'fetchTradesWs': false,
                'fetchTradingFeesWs': false,
                'fetchWithdrawalsWs': false,
                'watchBalance': false,
                'watchMyTrades': false,
                'watchOHLCV': false,
                'watchOHLCVForSymbols': false,
                'watchOrderBook': true,
                'watchOrderBookForSymbols': false,
                'watchOrders': false,
                'watchOrdersForSymbols': false,
                'watchPositions': false,
                'watchTicker': false,
                'watchTickers': false,
                'watchTrades': false,
                'watchTradesForSymbols': false,
            },
            'options': {
                'api': {
                    'ws': {
                        'staging': {
                            'mendelev': {
                                'public': {
                                    'orderbook': '/book/{marketId}',
                                    'orderbookTops': '/tops',
                                },
                            },
                            'osmium': {
                                'private': {
                                    'root': '/',
                                },
                            },
                        },
                    },
                },
            },
        });
    }

    getWebsocketUrl (system, privacy, path, params = {}) {
        const environment = this.options['environment'];
        path = this.implodeParams (path, params);
        return this.urls['api']['ws'][environment][system] + this.options['api']['ws'][environment][system][privacy][path];
    }

    async watchOrderBook (symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name cube#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://cubexch.gitbook.io/cube-api/websocket-market-data-api#order-book-data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int} [limit] the maximum amount of order book entries to return
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const environment = this.options['environment'];
        const marketId = symbol.toLowerCase();
        const market = this.market(marketId);
        symbol = this.safeSymbol(marketId, market);
        const url = this.urls['api']['ws'][environment]['mendelev'] + this.options['api']['ws']['mendelev']['public']['orderbook'];
        const requestId = '';
        const subParams = [];
        const request = {
            'method': 'SUBSCRIBE',
            'params': subParams,
            'id': requestId,
        };
        const messageHash = '';
        return await this.watch(url, messageHash, request, messageHash);
    }

    handleOrderBook (client, message) {}

    async createOrderWs (symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name binance#createOrderWs
         * @see https://cubexch.gitbook.io/cube-api/websocket-trade-api#orderrequest
         * @description create an order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @param {boolean} params.test test order, default false
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        const meta = await this.fetchMarketMeta (symbol);
        symbol = this.safeString (meta, 'symbol');
        const marketId = this.safeString (meta, 'marketId');
        const market = this.safeDict(meta, 'market');
        const quantityTickSize = this.safeNumber(this.safeDict(market, 'info'), 'quantityTickSize');
        const priceTickSize = this.safeNumber(this.safeDict(market, 'info'), 'priceTickSize');
        const exchangeAmount = this.parseToInt(amount / quantityTickSize);
        let exchangePrice = undefined;
        if (price !== undefined) {
            exchangePrice = this.parseToInt(price / priceTickSize);
        }
        let exchangeOrderType = undefined;
        if (type === 'limit') {
            exchangeOrderType = 0;
        }
        else if (type === 'market') {
            exchangeOrderType = 1;
        }
        else if (type === 'MARKET_WITH_PROTECTION') {
            exchangeOrderType = 2;
        }
        else {
            throw new InvalidOrder('OrderType was not recognized: ' + type);
        }
        let exchangeOrderSide = undefined;
        if (side === 'buy') {
            exchangeOrderSide = 0;
        }
        else if (side === 'sell') {
            exchangeOrderSide = 1;
        }
        else {
            throw new InvalidOrder('OrderSide was not recognized: ' + side);
        }
        const timestamp = this.milliseconds();
        const clientOrderIdFromParams = this.safeInteger(params, 'clientOrderId');
        let clientOrderId = undefined;
        if (clientOrderIdFromParams === undefined) {
            clientOrderId = timestamp;
        }
        else {
            clientOrderId = clientOrderIdFromParams;
        }
        const url = this.getWebsocketUrl ('osmium', 'private', 'root', { 'marketId': marketId });
        const signature = this.generateSignature()[0];
        console.log(signature)
    }

    handleOrderWs (client, message) {}
}
