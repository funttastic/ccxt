// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

// ----------------------------------------------------------------------------
import cubeRest from '../../src/cube.js';
import {InvalidOrder} from "../base/errors.js";
import { default as protobuf } from '../../../js/src/static_dependencies/protobufjs/light.js';
import { default as Client }  from '../../../js/src/base/ws/Client.js';

const tradeProtoDefinitions = {
    "options": {
        "csharp_namespace": "Cube.Trade",
        "go_package": "go/"
    },
    "nested": {
        "Side": {
            "values": {
                "BID": 0,
                "ASK": 1
            }
        },
        "TimeInForce": {
            "values": {
                "IMMEDIATE_OR_CANCEL": 0,
                "GOOD_FOR_SESSION": 1,
                "FILL_OR_KILL": 2
            }
        },
        "OrderType": {
            "values": {
                "LIMIT": 0,
                "MARKET_LIMIT": 1,
                "MARKET_WITH_PROTECTION": 2
            }
        },
        "SelfTradePrevention": {
            "values": {
                "CANCEL_RESTING": 0,
                "CANCEL_AGGRESSING": 1,
                "ALLOW_SELF_TRADE": 2
            }
        },
        "PostOnly": {
            "values": {
                "DISABLED": 0,
                "ENABLED": 1
            }
        },
        "ConnectionStatus": {
            "values": {
                "READ_ONLY": 0,
                "READ_WRITE": 1
            }
        },
        "Credentials": {
            "fields": {
                "accessKeyId": {
                    "type": "string",
                    "id": 1
                },
                "signature": {
                    "type": "string",
                    "id": 2
                },
                "timestamp": {
                    "type": "uint64",
                    "id": 3
                }
            }
        },
        "OrderRequest": {
            "oneofs": {
                "inner": {
                    "oneof": [
                        "new",
                        "cancel",
                        "modify",
                        "heartbeat",
                        "mc"
                    ]
                }
            },
            "fields": {
                "new": {
                    "type": "NewOrder",
                    "id": 1
                },
                "cancel": {
                    "type": "CancelOrder",
                    "id": 2
                },
                "modify": {
                    "type": "ModifyOrder",
                    "id": 3
                },
                "heartbeat": {
                    "type": "Heartbeat",
                    "id": 4
                },
                "mc": {
                    "type": "MassCancel",
                    "id": 5
                }
            }
        },
        "NewOrder": {
            "oneofs": {
                "_price": {
                    "oneof": [
                        "price"
                    ]
                },
                "_selfTradePrevention": {
                    "oneof": [
                        "selfTradePrevention"
                    ]
                }
            },
            "fields": {
                "clientOrderId": {
                    "type": "uint64",
                    "id": 1
                },
                "requestId": {
                    "type": "uint64",
                    "id": 2
                },
                "marketId": {
                    "type": "uint64",
                    "id": 3
                },
                "price": {
                    "type": "uint64",
                    "id": 4,
                    "options": {
                        "proto3_optional": true
                    }
                },
                "quantity": {
                    "type": "uint64",
                    "id": 5
                },
                "side": {
                    "type": "Side",
                    "id": 6
                },
                "timeInForce": {
                    "type": "TimeInForce",
                    "id": 7
                },
                "orderType": {
                    "type": "OrderType",
                    "id": 8
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 9
                },
                "selfTradePrevention": {
                    "type": "SelfTradePrevention",
                    "id": 10,
                    "options": {
                        "proto3_optional": true
                    }
                },
                "postOnly": {
                    "type": "PostOnly",
                    "id": 11
                },
                "cancelOnDisconnect": {
                    "type": "bool",
                    "id": 12
                }
            }
        },
        "CancelOrder": {
            "fields": {
                "marketId": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 4
                }
            }
        },
        "ModifyOrder": {
            "oneofs": {
                "_selfTradePrevention": {
                    "oneof": [
                        "selfTradePrevention"
                    ]
                }
            },
            "fields": {
                "marketId": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "newPrice": {
                    "type": "uint64",
                    "id": 4
                },
                "newQuantity": {
                    "type": "uint64",
                    "id": 5
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 6
                },
                "selfTradePrevention": {
                    "type": "SelfTradePrevention",
                    "id": 7,
                    "options": {
                        "proto3_optional": true
                    }
                },
                "postOnly": {
                    "type": "PostOnly",
                    "id": 8
                }
            }
        },
        "MassCancel": {
            "oneofs": {
                "_marketId": {
                    "oneof": [
                        "marketId"
                    ]
                },
                "_side": {
                    "oneof": [
                        "side"
                    ]
                }
            },
            "fields": {
                "subaccountId": {
                    "type": "uint64",
                    "id": 1
                },
                "requestId": {
                    "type": "uint64",
                    "id": 2
                },
                "marketId": {
                    "type": "uint64",
                    "id": 3,
                    "options": {
                        "proto3_optional": true
                    }
                },
                "side": {
                    "type": "Side",
                    "id": 4,
                    "options": {
                        "proto3_optional": true
                    }
                }
            }
        },
        "Heartbeat": {
            "fields": {
                "requestId": {
                    "type": "uint64",
                    "id": 1
                },
                "timestamp": {
                    "type": "uint64",
                    "id": 2
                }
            }
        },
        "OrderResponse": {
            "oneofs": {
                "inner": {
                    "oneof": [
                        "newAck",
                        "cancelAck",
                        "modifyAck",
                        "newReject",
                        "cancelReject",
                        "modifyReject",
                        "fill",
                        "heartbeat",
                        "position",
                        "massCancelAck",
                        "tradingStatus"
                    ]
                }
            },
            "fields": {
                "newAck": {
                    "type": "NewOrderAck",
                    "id": 1
                },
                "cancelAck": {
                    "type": "CancelOrderAck",
                    "id": 2
                },
                "modifyAck": {
                    "type": "ModifyOrderAck",
                    "id": 3
                },
                "newReject": {
                    "type": "NewOrderReject",
                    "id": 4
                },
                "cancelReject": {
                    "type": "CancelOrderReject",
                    "id": 5
                },
                "modifyReject": {
                    "type": "ModifyOrderReject",
                    "id": 6
                },
                "fill": {
                    "type": "Fill",
                    "id": 7
                },
                "heartbeat": {
                    "type": "Heartbeat",
                    "id": 8
                },
                "position": {
                    "type": "AssetPosition",
                    "id": 9
                },
                "massCancelAck": {
                    "type": "MassCancelAck",
                    "id": 10
                },
                "tradingStatus": {
                    "type": "TradingStatus",
                    "id": 11
                }
            }
        },
        "NewOrderAck": {
            "oneofs": {
                "_price": {
                    "oneof": [
                        "price"
                    ]
                }
            },
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "exchangeOrderId": {
                    "type": "uint64",
                    "id": 4
                },
                "marketId": {
                    "type": "uint64",
                    "id": 5
                },
                "price": {
                    "type": "uint64",
                    "id": 6,
                    "options": {
                        "proto3_optional": true
                    }
                },
                "quantity": {
                    "type": "uint64",
                    "id": 7
                },
                "side": {
                    "type": "Side",
                    "id": 8
                },
                "timeInForce": {
                    "type": "TimeInForce",
                    "id": 9
                },
                "orderType": {
                    "type": "OrderType",
                    "id": 10
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 11
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 12
                },
                "cancelOnDisconnect": {
                    "type": "bool",
                    "id": 13
                }
            }
        },
        "CancelOrderAck": {
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 4
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 5
                },
                "reason": {
                    "type": "Reason",
                    "id": 6
                },
                "marketId": {
                    "type": "uint64",
                    "id": 7
                },
                "exchangeOrderId": {
                    "type": "uint64",
                    "id": 8
                }
            },
            "nested": {
                "Reason": {
                    "values": {
                        "UNCLASSIFIED": 0,
                        "DISCONNECT": 1,
                        "REQUESTED": 2,
                        "IOC": 3,
                        "STP_RESTING": 4,
                        "STP_AGGRESSING": 5,
                        "MASS_CANCEL": 6,
                        "POSITION_LIMIT": 7
                    }
                }
            }
        },
        "ModifyOrderAck": {
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 4
                },
                "remainingQuantity": {
                    "type": "uint64",
                    "id": 5
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 6
                },
                "marketId": {
                    "type": "uint64",
                    "id": 7
                },
                "price": {
                    "type": "uint64",
                    "id": 8
                },
                "quantity": {
                    "type": "uint64",
                    "id": 9
                },
                "cumulativeQuantity": {
                    "type": "uint64",
                    "id": 10
                },
                "exchangeOrderId": {
                    "type": "uint64",
                    "id": 11
                }
            }
        },
        "MassCancelAck": {
            "oneofs": {
                "_reason": {
                    "oneof": [
                        "reason"
                    ]
                }
            },
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 4
                },
                "reason": {
                    "type": "Reason",
                    "id": 6,
                    "options": {
                        "proto3_optional": true
                    }
                },
                "totalAffectedOrders": {
                    "type": "uint32",
                    "id": 7
                }
            },
            "nested": {
                "Reason": {
                    "values": {
                        "UNCLASSIFIED": 0,
                        "INVALID_MARKET_ID": 1,
                        "INVALID_SIDE": 2
                    }
                }
            }
        },
        "NewOrderReject": {
            "oneofs": {
                "_price": {
                    "oneof": [
                        "price"
                    ]
                }
            },
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 4
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 5
                },
                "reason": {
                    "type": "Reason",
                    "id": 6
                },
                "marketId": {
                    "type": "uint64",
                    "id": 7
                },
                "price": {
                    "type": "uint64",
                    "id": 8,
                    "options": {
                        "proto3_optional": true
                    }
                },
                "quantity": {
                    "type": "uint64",
                    "id": 9
                },
                "side": {
                    "type": "Side",
                    "id": 10
                },
                "timeInForce": {
                    "type": "TimeInForce",
                    "id": 11
                },
                "orderType": {
                    "type": "OrderType",
                    "id": 12
                }
            },
            "nested": {
                "Reason": {
                    "values": {
                        "UNCLASSIFIED": 0,
                        "INVALID_QUANTITY": 1,
                        "INVALID_MARKET_ID": 2,
                        "DUPLICATE_ORDER_ID": 3,
                        "INVALID_SIDE": 4,
                        "INVALID_TIME_IN_FORCE": 5,
                        "INVALID_ORDER_TYPE": 6,
                        "INVALID_POST_ONLY": 7,
                        "INVALID_SELF_TRADE_PREVENTION": 8,
                        "UNKNOWN_TRADER": 9,
                        "PRICE_WITH_MARKET_LIMIT_ORDER": 10,
                        "POST_ONLY_WITH_MARKET_ORDER": 11,
                        "POST_ONLY_WITH_INVALID_TIF": 12,
                        "EXCEEDED_SPOT_POSITION": 13,
                        "NO_OPPOSING_RESTING_ORDER": 14,
                        "POST_ONLY_WOULD_TRADE": 15,
                        "DID_NOT_FULLY_FILL": 16,
                        "ONLY_ORDER_CANCEL_ACCEPTED": 17,
                        "PROTECTION_PRICE_WOULD_NOT_TRADE": 18,
                        "NO_REFERENCE_PRICE": 19,
                        "SLIPPAGE_TOO_HIGH": 20,
                        "OUTSIDE_PRICE_BAND": 21
                    }
                }
            }
        },
        "CancelOrderReject": {
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 4
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 5
                },
                "reason": {
                    "type": "Reason",
                    "id": 6
                },
                "marketId": {
                    "type": "uint64",
                    "id": 7
                }
            },
            "nested": {
                "Reason": {
                    "values": {
                        "UNCLASSIFIED": 0,
                        "INVALID_MARKET_ID": 1,
                        "ORDER_NOT_FOUND": 2
                    }
                }
            }
        },
        "ModifyOrderReject": {
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "requestId": {
                    "type": "uint64",
                    "id": 3
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 4
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 5
                },
                "reason": {
                    "type": "Reason",
                    "id": 6
                },
                "marketId": {
                    "type": "uint64",
                    "id": 7
                }
            },
            "nested": {
                "Reason": {
                    "values": {
                        "UNCLASSIFIED": 0,
                        "INVALID_QUANTITY": 1,
                        "INVALID_MARKET_ID": 2,
                        "ORDER_NOT_FOUND": 3,
                        "INVALID_IFM": 4,
                        "INVALID_POST_ONLY": 5,
                        "INVALID_SELF_TRADE_PREVENTION": 6,
                        "UNKNOWN_TRADER": 7,
                        "EXCEEDED_SPOT_POSITION": 8,
                        "POST_ONLY_WOULD_TRADE": 9,
                        "ONLY_ORDER_CANCEL_ACCEPTED": 17,
                        "OUTSIDE_PRICE_BAND": 11
                    }
                }
            }
        },
        "Fill": {
            "fields": {
                "msgSeqNum": {
                    "type": "uint64",
                    "id": 1
                },
                "marketId": {
                    "type": "uint64",
                    "id": 2
                },
                "clientOrderId": {
                    "type": "uint64",
                    "id": 3
                },
                "exchangeOrderId": {
                    "type": "uint64",
                    "id": 4
                },
                "fillPrice": {
                    "type": "uint64",
                    "id": 5
                },
                "fillQuantity": {
                    "type": "uint64",
                    "id": 6
                },
                "leavesQuantity": {
                    "type": "uint64",
                    "id": 7
                },
                "fillQuoteQuantity": {
                    "type": "uint64",
                    "id": 15
                },
                "transactTime": {
                    "type": "uint64",
                    "id": 8
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 9
                },
                "cumulativeQuantity": {
                    "type": "uint64",
                    "id": 10
                },
                "side": {
                    "type": "Side",
                    "id": 11
                },
                "aggressorIndicator": {
                    "type": "bool",
                    "id": 12
                },
                "feeRatio": {
                    "type": "FixedPointDecimal",
                    "id": 13
                },
                "tradeId": {
                    "type": "uint64",
                    "id": 14
                }
            }
        },
        "FixedPointDecimal": {
            "fields": {
                "mantissa": {
                    "type": "int64",
                    "id": 1
                },
                "exponent": {
                    "type": "int32",
                    "id": 2
                }
            }
        },
        "AssetPosition": {
            "fields": {
                "subaccountId": {
                    "type": "uint64",
                    "id": 1
                },
                "assetId": {
                    "type": "uint64",
                    "id": 2
                },
                "total": {
                    "type": "RawUnits",
                    "id": 3
                },
                "available": {
                    "type": "RawUnits",
                    "id": 4
                }
            }
        },
        "RawUnits": {
            "fields": {
                "word0": {
                    "type": "uint64",
                    "id": 1
                },
                "word1": {
                    "type": "uint64",
                    "id": 2
                },
                "word2": {
                    "type": "uint64",
                    "id": 3
                },
                "word3": {
                    "type": "uint64",
                    "id": 4
                }
            }
        },
        "Bootstrap": {
            "oneofs": {
                "inner": {
                    "oneof": [
                        "done",
                        "resting",
                        "position",
                        "tradingStatus"
                    ]
                }
            },
            "fields": {
                "done": {
                    "type": "Done",
                    "id": 1
                },
                "resting": {
                    "type": "RestingOrders",
                    "id": 2
                },
                "position": {
                    "type": "AssetPositions",
                    "id": 3
                },
                "tradingStatus": {
                    "type": "TradingStatus",
                    "id": 4
                }
            }
        },
        "RestingOrders": {
            "fields": {
                "orders": {
                    "rule": "repeated",
                    "type": "RestingOrder",
                    "id": 1
                }
            }
        },
        "AssetPositions": {
            "fields": {
                "positions": {
                    "rule": "repeated",
                    "type": "AssetPosition",
                    "id": 1
                }
            }
        },
        "Done": {
            "fields": {
                "latestTransactTime": {
                    "type": "uint64",
                    "id": 1
                },
                "readOnly": {
                    "type": "bool",
                    "id": 2
                }
            }
        },
        "TradingStatus": {
            "fields": {
                "connectionStatus": {
                    "type": "ConnectionStatus",
                    "id": 1
                }
            }
        },
        "RestingOrder": {
            "fields": {
                "clientOrderId": {
                    "type": "uint64",
                    "id": 1
                },
                "exchangeOrderId": {
                    "type": "uint64",
                    "id": 2
                },
                "marketId": {
                    "type": "uint64",
                    "id": 3
                },
                "price": {
                    "type": "uint64",
                    "id": 4
                },
                "orderQuantity": {
                    "type": "uint64",
                    "id": 5
                },
                "side": {
                    "type": "Side",
                    "id": 6
                },
                "timeInForce": {
                    "type": "TimeInForce",
                    "id": 7
                },
                "orderType": {
                    "type": "OrderType",
                    "id": 8
                },
                "remainingQuantity": {
                    "type": "uint64",
                    "id": 9
                },
                "restTime": {
                    "type": "uint64",
                    "id": 10
                },
                "subaccountId": {
                    "type": "uint64",
                    "id": 11
                },
                "cumulativeQuantity": {
                    "type": "uint64",
                    "id": 12
                },
                "cancelOnDisconnect": {
                    "type": "bool",
                    "id": 13
                }
            }
        }
    }
}
const root  = protobuf.Root.fromJSON(tradeProtoDefinitions)
const AssetPosition = root.lookupType('AssetPosition');
const AssetPositions = root.lookupType('AssetPositions');
const Bootstrap = root.lookupType('Bootstrap');
const CancelOrder = root.lookupType('CancelOrder');
const CancelOrderAck = root.lookupType('CancelOrderAck');
const CancelOrderReject = root.lookupType('CancelOrderReject');
const Credentials = root.lookupType('Credentials');
const Done = root.lookupType('Done');
const Fill = root.lookupType('Fill');
const FixedPointDecimal = root.lookupType('FixedPointDecimal');
const Heartbeat = root.lookupType('Heartbeat');
const MassCancel = root.lookupType('MassCancel');
const MassCancelAck = root.lookupType('MassCancelAck');
const ModifyOrder = root.lookupType('ModifyOrder');
const ModifyOrderAck = root.lookupType('ModifyOrderAck');
const ModifyOrderReject = root.lookupType('ModifyOrderReject');
const NewOrder = root.lookupType('NewOrder');
const NewOrderAck = root.lookupType('NewOrderAck');
const NewOrderReject = root.lookupType('NewOrderReject');
const OrderRequest = root.lookupType('OrderRequest');
const OrderResponse = root.lookupType('OrderResponse');
const RawUnits = root.lookupType('RawUnits');
const RestingOrder = root.lookupType('RestingOrder');
const RestingOrders = root.lookupType('RestingOrders');
const TradingStatus = root.lookupType('TradingStatus');
// -----------------------------------------------------------------------------

export default class cube extends cubeRest {
    describe() {
        return this.deepExtend(super.describe(), {
            'has': {
                'ws': true,
                'cancelOrderWs': false,
                'cancelOrdersWs': false,
                'cancelAllOrdersWs': false,
                'createOrderWs': true,
                'editOrderWs': false,
                'fetchBalanceWs': false,
                'fetchDepositsWs': false,
                'fetchMarketsWs': false,
                'fetchMyTradesWs': false,
                'fetchOHLCVWs': false,
                'fetchOpenOrdersWs': false,
                'fetchOrderWs': false,
                'fetchOrdersWs': false,
                'fetchTradesWs': false,
                'fetchTradingFeesWs': false,
                'fetchWithdrawalsWs': false,
                'watchBalance': false,
                'watchMyTrades': false,
                'watchOHLCV': false,
                'watchOHLCVForSymbols': false,
                'watchOrderBook': true,
                'watchOrderBookForSymbols': false,
                'watchOrders': false,
                'watchOrdersForSymbols': false,
                'watchPositions': false,
                'watchTicker': false,
                'watchTickers': false,
                'watchTrades': false,
                'watchTradesForSymbols': false,
            },
            'options': {
                'ws': {
                    'staging': {
                        'mendelev': {
                            'public': {
                                'orderbook': '/book/{marketId}',
                                'orderbookTops': '/tops',
                            },
                        },
                        'osmium': {
                            'private': {
                                'root': '/',
                            },
                        },
                    },
                    'cost': 5,
                },
            },
        });
    }

    getWebsocketUrl (system, privacy, path, params = {}) {
        const environment = this.options['environment'];
        path = this.implodeParams (path, params);
        return this.urls['api']['ws'][environment][system] + this.options['ws'][environment][system][privacy][path];
    }

    async watchOrderBook (symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name cube#watchOrderBook
         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://cubexch.gitbook.io/cube-api/websocket-market-data-api#order-book-data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int} [limit] the maximum amount of order book entries to return
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const environment = this.options['environment'];
        const marketId = symbol.toLowerCase();
        const market = this.market(marketId);
        symbol = this.safeSymbol(marketId, market);
        const url = this.urls['api']['ws'][environment]['mendelev'] + this.options['api']['ws']['mendelev']['public']['orderbook'];
        const requestId = '';
        const subParams = [];
        const request = {
            'method': 'SUBSCRIBE',
            'params': subParams,
            'id': requestId,
        };
        const messageHash = '';
        return await this.watch(url, messageHash, request, messageHash);
    }

    handleOrderBook (client, message) {}

    async createOrderWs (symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name binance#createOrderWs
         * @see https://cubexch.gitbook.io/cube-api/websocket-trade-api#orderrequest
         * @description create an order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float|undefined} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @param {boolean} params.test test order, default false
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        const meta = await this.fetchMarketMeta (symbol);
        symbol = this.safeString (meta, 'symbol');
        const marketId = this.safeString (meta, 'marketId');
        const market = this.safeDict(meta, 'market');
        const quantityTickSize = this.safeNumber(this.safeDict(market, 'info'), 'quantityTickSize');
        const priceTickSize = this.safeNumber(this.safeDict(market, 'info'), 'priceTickSize');
        const exchangeAmount = this.parseToInt(amount / quantityTickSize);
        let exchangePrice = undefined;
        if (price !== undefined) {
            exchangePrice = this.parseToInt(price / priceTickSize);
        }
        let exchangeOrderType = undefined;
        if (type === 'limit') {
            exchangeOrderType = 0;
        }
        else if (type === 'market') {
            exchangeOrderType = 1;
        }
        else if (type === 'MARKET_WITH_PROTECTION') {
            exchangeOrderType = 2;
        }
        else {
            throw new InvalidOrder('OrderType was not recognized: ' + type);
        }
        let exchangeOrderSide = undefined;
        if (side === 'buy') {
            exchangeOrderSide = 0;
        }
        else if (side === 'sell') {
            exchangeOrderSide = 1;
        }
        else {
            throw new InvalidOrder('OrderSide was not recognized: ' + side);
        }
        const timestamp = this.milliseconds();
        const clientOrderIdFromParams = this.safeInteger(params, 'clientOrderId');
        let clientOrderId = undefined;
        if (clientOrderIdFromParams === undefined) {
            clientOrderId = timestamp;
        }
        else {
            clientOrderId = clientOrderIdFromParams;
        }
        const url = this.getWebsocketUrl ('osmium', 'private', 'root', { 'marketId': marketId });

        // const clinet = this.clinet(url)
        const client = new Client(url);

        const credentialsMessage = Credentials.create({
            accessKeyId: this.apiKey,
            signature: this.generateSignature()[0],
            timestamp: timestamp
        });
        const credentialsBuffer = Credentials.encode(credentialsMessage).finish();

        await client.send(credentialsBuffer)

        const newOrder = NewOrder.create({
            clientOrderId: timestamp,
            requestId: 1,
            marketId: marketId,
            price: exchangePrice,
            quantity: exchangeAmount,
            side: exchangeOrderSide,
            timeInForce: 1,
            orderType: exchangeOrderType,
            subaccountId: this.safeInteger(this.options, 'subaccountId'),
            postOnly: 1,
            cancelOnDisconnect: false
        });

        const heartbeat = Heartbeat.create({
            requestId: 1,
            timestamp: timestamp,
        });

        const orderRequest = OrderRequest.create({
            new: newOrder,
            heartbeat: heartbeat,
        });

        const buffer = OrderRequest.encode(orderRequest).finish();

        // const watch = await this.watch(url, 'message', buffer, 'credentials', credentialsMessage);

        console.log(buffer)
    }

    handleOrderWs (client, message) {}
}
